
KeyPressTriggers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002410  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  0800251c  0800251c  0001251c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800254c  0800254c  00020034  2**0
                  CONTENTS
  4 .ARM          00000000  0800254c  0800254c  00020034  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800254c  0800254c  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800254c  0800254c  0001254c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002550  08002550  00012550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  08002554  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  20000034  08002588  00020034  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  08002588  000200c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .debug_info   000097fd  00000000  00000000  0002005d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000225c  00000000  00000000  0002985a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b00  00000000  00000000  0002bab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009a8  00000000  00000000  0002c5b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017c2f  00000000  00000000  0002cf60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ff83  00000000  00000000  00044b8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000835de  00000000  00000000  00054b12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d80f0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002988  00000000  00000000  000d8140  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000034 	.word	0x20000034
 8000128:	00000000 	.word	0x00000000
 800012c:	08002504 	.word	0x08002504

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000038 	.word	0x20000038
 8000148:	08002504 	.word	0x08002504

0800014c <DP_Polling>:
 *@Output:none
 *
 **********************************************************
 **/
void DP_Polling(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	DP_IndexLogic();
 8000150:	f000 f806 	bl	8000160 <DP_IndexLogic>
	DP_ModeLogic();
 8000154:	f000 f890 	bl	8000278 <DP_ModeLogic>
	DP_Output();
 8000158:	f000 f8e6 	bl	8000328 <DP_Output>
}
 800015c:	bf00      	nop
 800015e:	bd80      	pop	{r7, pc}

08000160 <DP_IndexLogic>:
 *@Output:none
 *
 **********************************************************
 **/
static void DP_IndexLogic(void)
{
 8000160:	b480      	push	{r7}
 8000162:	af00      	add	r7, sp, #0
	static unsigned char PreSate = 0;
	static unsigned char PreSate1 = 0;

	if((0 == PreSate) && (PRESS == DP_Get_TimeUpBt()))
 8000164:	4b3e      	ldr	r3, [pc, #248]	; (8000260 <DP_IndexLogic+0x100>)
 8000166:	781b      	ldrb	r3, [r3, #0]
 8000168:	2b00      	cmp	r3, #0
 800016a:	d133      	bne.n	80001d4 <DP_IndexLogic+0x74>
 800016c:	4b3d      	ldr	r3, [pc, #244]	; (8000264 <DP_IndexLogic+0x104>)
 800016e:	785b      	ldrb	r3, [r3, #1]
 8000170:	f003 0302 	and.w	r3, r3, #2
 8000174:	b2db      	uxtb	r3, r3
 8000176:	2b00      	cmp	r3, #0
 8000178:	d02c      	beq.n	80001d4 <DP_IndexLogic+0x74>
	{
		PreSate = 1;
 800017a:	4b39      	ldr	r3, [pc, #228]	; (8000260 <DP_IndexLogic+0x100>)
 800017c:	2201      	movs	r2, #1
 800017e:	701a      	strb	r2, [r3, #0]
		if(DP_NINE > DP_Index_1)
 8000180:	4b39      	ldr	r3, [pc, #228]	; (8000268 <DP_IndexLogic+0x108>)
 8000182:	781b      	ldrb	r3, [r3, #0]
 8000184:	2b08      	cmp	r3, #8
 8000186:	d806      	bhi.n	8000196 <DP_IndexLogic+0x36>
		{
			DP_Index_1++;
 8000188:	4b37      	ldr	r3, [pc, #220]	; (8000268 <DP_IndexLogic+0x108>)
 800018a:	781b      	ldrb	r3, [r3, #0]
 800018c:	3301      	adds	r3, #1
 800018e:	b2da      	uxtb	r2, r3
 8000190:	4b35      	ldr	r3, [pc, #212]	; (8000268 <DP_IndexLogic+0x108>)
 8000192:	701a      	strb	r2, [r3, #0]
		if(DP_NINE > DP_Index_1)
 8000194:	e022      	b.n	80001dc <DP_IndexLogic+0x7c>
		}
		else
		{
			if(DP_NINE > DP_Index_2)
 8000196:	4b35      	ldr	r3, [pc, #212]	; (800026c <DP_IndexLogic+0x10c>)
 8000198:	781b      	ldrb	r3, [r3, #0]
 800019a:	2b08      	cmp	r3, #8
 800019c:	d809      	bhi.n	80001b2 <DP_IndexLogic+0x52>
			{
				DP_Index_2++;
 800019e:	4b33      	ldr	r3, [pc, #204]	; (800026c <DP_IndexLogic+0x10c>)
 80001a0:	781b      	ldrb	r3, [r3, #0]
 80001a2:	3301      	adds	r3, #1
 80001a4:	b2da      	uxtb	r2, r3
 80001a6:	4b31      	ldr	r3, [pc, #196]	; (800026c <DP_IndexLogic+0x10c>)
 80001a8:	701a      	strb	r2, [r3, #0]
				DP_Index_1 = 0;
 80001aa:	4b2f      	ldr	r3, [pc, #188]	; (8000268 <DP_IndexLogic+0x108>)
 80001ac:	2200      	movs	r2, #0
 80001ae:	701a      	strb	r2, [r3, #0]
		if(DP_NINE > DP_Index_1)
 80001b0:	e014      	b.n	80001dc <DP_IndexLogic+0x7c>
			}
			else
			{
				if(DP_NINE > DP_Index_3)
 80001b2:	4b2f      	ldr	r3, [pc, #188]	; (8000270 <DP_IndexLogic+0x110>)
 80001b4:	781b      	ldrb	r3, [r3, #0]
 80001b6:	2b08      	cmp	r3, #8
 80001b8:	d810      	bhi.n	80001dc <DP_IndexLogic+0x7c>
				{
					DP_Index_3++;
 80001ba:	4b2d      	ldr	r3, [pc, #180]	; (8000270 <DP_IndexLogic+0x110>)
 80001bc:	781b      	ldrb	r3, [r3, #0]
 80001be:	3301      	adds	r3, #1
 80001c0:	b2da      	uxtb	r2, r3
 80001c2:	4b2b      	ldr	r3, [pc, #172]	; (8000270 <DP_IndexLogic+0x110>)
 80001c4:	701a      	strb	r2, [r3, #0]
					DP_Index_1 = 0;
 80001c6:	4b28      	ldr	r3, [pc, #160]	; (8000268 <DP_IndexLogic+0x108>)
 80001c8:	2200      	movs	r2, #0
 80001ca:	701a      	strb	r2, [r3, #0]
					DP_Index_2 = 0;
 80001cc:	4b27      	ldr	r3, [pc, #156]	; (800026c <DP_IndexLogic+0x10c>)
 80001ce:	2200      	movs	r2, #0
 80001d0:	701a      	strb	r2, [r3, #0]
		if(DP_NINE > DP_Index_1)
 80001d2:	e003      	b.n	80001dc <DP_IndexLogic+0x7c>
			}
		}
	}
	else
	{
		PreSate = 0;
 80001d4:	4b22      	ldr	r3, [pc, #136]	; (8000260 <DP_IndexLogic+0x100>)
 80001d6:	2200      	movs	r2, #0
 80001d8:	701a      	strb	r2, [r3, #0]
 80001da:	e000      	b.n	80001de <DP_IndexLogic+0x7e>
		if(DP_NINE > DP_Index_1)
 80001dc:	bf00      	nop
	}

	if((0 == PreSate1) && (PRESS == DP_Get_TimeDownBt()))
 80001de:	4b25      	ldr	r3, [pc, #148]	; (8000274 <DP_IndexLogic+0x114>)
 80001e0:	781b      	ldrb	r3, [r3, #0]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	d133      	bne.n	800024e <DP_IndexLogic+0xee>
 80001e6:	4b1f      	ldr	r3, [pc, #124]	; (8000264 <DP_IndexLogic+0x104>)
 80001e8:	789b      	ldrb	r3, [r3, #2]
 80001ea:	f003 0302 	and.w	r3, r3, #2
 80001ee:	b2db      	uxtb	r3, r3
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d02c      	beq.n	800024e <DP_IndexLogic+0xee>
	{
		PreSate1 = 1;
 80001f4:	4b1f      	ldr	r3, [pc, #124]	; (8000274 <DP_IndexLogic+0x114>)
 80001f6:	2201      	movs	r2, #1
 80001f8:	701a      	strb	r2, [r3, #0]
		if(DP_ZERO < DP_Index_1)
 80001fa:	4b1b      	ldr	r3, [pc, #108]	; (8000268 <DP_IndexLogic+0x108>)
 80001fc:	781b      	ldrb	r3, [r3, #0]
 80001fe:	2b00      	cmp	r3, #0
 8000200:	d006      	beq.n	8000210 <DP_IndexLogic+0xb0>
		{
			DP_Index_1--;
 8000202:	4b19      	ldr	r3, [pc, #100]	; (8000268 <DP_IndexLogic+0x108>)
 8000204:	781b      	ldrb	r3, [r3, #0]
 8000206:	3b01      	subs	r3, #1
 8000208:	b2da      	uxtb	r2, r3
 800020a:	4b17      	ldr	r3, [pc, #92]	; (8000268 <DP_IndexLogic+0x108>)
 800020c:	701a      	strb	r2, [r3, #0]
		if(DP_ZERO < DP_Index_1)
 800020e:	e022      	b.n	8000256 <DP_IndexLogic+0xf6>
		}
		else
		{
			if(DP_ZERO < DP_Index_2)
 8000210:	4b16      	ldr	r3, [pc, #88]	; (800026c <DP_IndexLogic+0x10c>)
 8000212:	781b      	ldrb	r3, [r3, #0]
 8000214:	2b00      	cmp	r3, #0
 8000216:	d009      	beq.n	800022c <DP_IndexLogic+0xcc>
			{
				DP_Index_2--;
 8000218:	4b14      	ldr	r3, [pc, #80]	; (800026c <DP_IndexLogic+0x10c>)
 800021a:	781b      	ldrb	r3, [r3, #0]
 800021c:	3b01      	subs	r3, #1
 800021e:	b2da      	uxtb	r2, r3
 8000220:	4b12      	ldr	r3, [pc, #72]	; (800026c <DP_IndexLogic+0x10c>)
 8000222:	701a      	strb	r2, [r3, #0]
				DP_Index_1 = DP_NINE;
 8000224:	4b10      	ldr	r3, [pc, #64]	; (8000268 <DP_IndexLogic+0x108>)
 8000226:	2209      	movs	r2, #9
 8000228:	701a      	strb	r2, [r3, #0]
		if(DP_ZERO < DP_Index_1)
 800022a:	e014      	b.n	8000256 <DP_IndexLogic+0xf6>
			}
			else
			{
				if(DP_ZERO < DP_Index_3)
 800022c:	4b10      	ldr	r3, [pc, #64]	; (8000270 <DP_IndexLogic+0x110>)
 800022e:	781b      	ldrb	r3, [r3, #0]
 8000230:	2b00      	cmp	r3, #0
 8000232:	d010      	beq.n	8000256 <DP_IndexLogic+0xf6>
				{
					DP_Index_3--;
 8000234:	4b0e      	ldr	r3, [pc, #56]	; (8000270 <DP_IndexLogic+0x110>)
 8000236:	781b      	ldrb	r3, [r3, #0]
 8000238:	3b01      	subs	r3, #1
 800023a:	b2da      	uxtb	r2, r3
 800023c:	4b0c      	ldr	r3, [pc, #48]	; (8000270 <DP_IndexLogic+0x110>)
 800023e:	701a      	strb	r2, [r3, #0]
					DP_Index_1 = DP_NINE;
 8000240:	4b09      	ldr	r3, [pc, #36]	; (8000268 <DP_IndexLogic+0x108>)
 8000242:	2209      	movs	r2, #9
 8000244:	701a      	strb	r2, [r3, #0]
					DP_Index_2 = DP_NINE;
 8000246:	4b09      	ldr	r3, [pc, #36]	; (800026c <DP_IndexLogic+0x10c>)
 8000248:	2209      	movs	r2, #9
 800024a:	701a      	strb	r2, [r3, #0]
		if(DP_ZERO < DP_Index_1)
 800024c:	e003      	b.n	8000256 <DP_IndexLogic+0xf6>
			}
		}
	}
	else
	{
		PreSate1 = 0;
 800024e:	4b09      	ldr	r3, [pc, #36]	; (8000274 <DP_IndexLogic+0x114>)
 8000250:	2200      	movs	r2, #0
 8000252:	701a      	strb	r2, [r3, #0]
	}
}
 8000254:	e000      	b.n	8000258 <DP_IndexLogic+0xf8>
		if(DP_ZERO < DP_Index_1)
 8000256:	bf00      	nop
}
 8000258:	bf00      	nop
 800025a:	46bd      	mov	sp, r7
 800025c:	bc80      	pop	{r7}
 800025e:	4770      	bx	lr
 8000260:	20000053 	.word	0x20000053
 8000264:	20000064 	.word	0x20000064
 8000268:	20000050 	.word	0x20000050
 800026c:	20000051 	.word	0x20000051
 8000270:	20000052 	.word	0x20000052
 8000274:	20000054 	.word	0x20000054

08000278 <DP_ModeLogic>:
 *@Output:none
 *
 **********************************************************
 **/
static void DP_ModeLogic(void)
{
 8000278:	b480      	push	{r7}
 800027a:	af00      	add	r7, sp, #0
	if(MODE_MS == DP_Get_Mode())
 800027c:	4b26      	ldr	r3, [pc, #152]	; (8000318 <DP_ModeLogic+0xa0>)
 800027e:	781b      	ldrb	r3, [r3, #0]
 8000280:	2b00      	cmp	r3, #0
 8000282:	d115      	bne.n	80002b0 <DP_ModeLogic+0x38>
	{
		DP_Set_MS();
 8000284:	4b25      	ldr	r3, [pc, #148]	; (800031c <DP_ModeLogic+0xa4>)
 8000286:	781b      	ldrb	r3, [r3, #0]
 8000288:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800028c:	b2da      	uxtb	r2, r3
 800028e:	4b24      	ldr	r3, [pc, #144]	; (8000320 <DP_ModeLogic+0xa8>)
 8000290:	701a      	strb	r2, [r3, #0]
		DP_Clear_S();
 8000292:	4b24      	ldr	r3, [pc, #144]	; (8000324 <DP_ModeLogic+0xac>)
 8000294:	781b      	ldrb	r3, [r3, #0]
 8000296:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800029a:	b2da      	uxtb	r2, r3
 800029c:	4b20      	ldr	r3, [pc, #128]	; (8000320 <DP_ModeLogic+0xa8>)
 800029e:	701a      	strb	r2, [r3, #0]
		DP_Clear_10S();
 80002a0:	4b1f      	ldr	r3, [pc, #124]	; (8000320 <DP_ModeLogic+0xa8>)
 80002a2:	781b      	ldrb	r3, [r3, #0]
 80002a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80002a8:	b2da      	uxtb	r2, r3
 80002aa:	4b1d      	ldr	r3, [pc, #116]	; (8000320 <DP_ModeLogic+0xa8>)
 80002ac:	701a      	strb	r2, [r3, #0]
	{
		DP_Clear_MS();
		DP_Clear_S();
		DP_Set_10S();
	}
}
 80002ae:	e02e      	b.n	800030e <DP_ModeLogic+0x96>
	else if(MODE_S == DP_Get_Mode())
 80002b0:	4b19      	ldr	r3, [pc, #100]	; (8000318 <DP_ModeLogic+0xa0>)
 80002b2:	781b      	ldrb	r3, [r3, #0]
 80002b4:	2b01      	cmp	r3, #1
 80002b6:	d115      	bne.n	80002e4 <DP_ModeLogic+0x6c>
		DP_Clear_MS();
 80002b8:	4b18      	ldr	r3, [pc, #96]	; (800031c <DP_ModeLogic+0xa4>)
 80002ba:	781b      	ldrb	r3, [r3, #0]
 80002bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80002c0:	b2da      	uxtb	r2, r3
 80002c2:	4b17      	ldr	r3, [pc, #92]	; (8000320 <DP_ModeLogic+0xa8>)
 80002c4:	701a      	strb	r2, [r3, #0]
		DP_Set_S();
 80002c6:	4b17      	ldr	r3, [pc, #92]	; (8000324 <DP_ModeLogic+0xac>)
 80002c8:	781b      	ldrb	r3, [r3, #0]
 80002ca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80002ce:	b2da      	uxtb	r2, r3
 80002d0:	4b13      	ldr	r3, [pc, #76]	; (8000320 <DP_ModeLogic+0xa8>)
 80002d2:	701a      	strb	r2, [r3, #0]
		DP_Clear_10S();
 80002d4:	4b12      	ldr	r3, [pc, #72]	; (8000320 <DP_ModeLogic+0xa8>)
 80002d6:	781b      	ldrb	r3, [r3, #0]
 80002d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80002dc:	b2da      	uxtb	r2, r3
 80002de:	4b10      	ldr	r3, [pc, #64]	; (8000320 <DP_ModeLogic+0xa8>)
 80002e0:	701a      	strb	r2, [r3, #0]
}
 80002e2:	e014      	b.n	800030e <DP_ModeLogic+0x96>
		DP_Clear_MS();
 80002e4:	4b0d      	ldr	r3, [pc, #52]	; (800031c <DP_ModeLogic+0xa4>)
 80002e6:	781b      	ldrb	r3, [r3, #0]
 80002e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80002ec:	b2da      	uxtb	r2, r3
 80002ee:	4b0c      	ldr	r3, [pc, #48]	; (8000320 <DP_ModeLogic+0xa8>)
 80002f0:	701a      	strb	r2, [r3, #0]
		DP_Clear_S();
 80002f2:	4b0c      	ldr	r3, [pc, #48]	; (8000324 <DP_ModeLogic+0xac>)
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80002fa:	b2da      	uxtb	r2, r3
 80002fc:	4b08      	ldr	r3, [pc, #32]	; (8000320 <DP_ModeLogic+0xa8>)
 80002fe:	701a      	strb	r2, [r3, #0]
		DP_Set_10S();
 8000300:	4b07      	ldr	r3, [pc, #28]	; (8000320 <DP_ModeLogic+0xa8>)
 8000302:	781b      	ldrb	r3, [r3, #0]
 8000304:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000308:	b2da      	uxtb	r2, r3
 800030a:	4b05      	ldr	r3, [pc, #20]	; (8000320 <DP_ModeLogic+0xa8>)
 800030c:	701a      	strb	r2, [r3, #0]
}
 800030e:	bf00      	nop
 8000310:	46bd      	mov	sp, r7
 8000312:	bc80      	pop	{r7}
 8000314:	4770      	bx	lr
 8000316:	bf00      	nop
 8000318:	20000055 	.word	0x20000055
 800031c:	20000060 	.word	0x20000060
 8000320:	2000005e 	.word	0x2000005e
 8000324:	2000005f 	.word	0x2000005f

08000328 <DP_Output>:
 *@Output:none
 *
 **********************************************************
 **/
static void DP_Output(void)
{
 8000328:	b480      	push	{r7}
 800032a:	af00      	add	r7, sp, #0
	DP_Set_DiplayDig1(DP_Show[DP_Index_1]);
 800032c:	4b0c      	ldr	r3, [pc, #48]	; (8000360 <DP_Output+0x38>)
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	461a      	mov	r2, r3
 8000332:	4b0c      	ldr	r3, [pc, #48]	; (8000364 <DP_Output+0x3c>)
 8000334:	5c9a      	ldrb	r2, [r3, r2]
 8000336:	4b0c      	ldr	r3, [pc, #48]	; (8000368 <DP_Output+0x40>)
 8000338:	701a      	strb	r2, [r3, #0]
	DP_Set_DiplayDig2(DP_Show[DP_Index_2]);
 800033a:	4b0c      	ldr	r3, [pc, #48]	; (800036c <DP_Output+0x44>)
 800033c:	781b      	ldrb	r3, [r3, #0]
 800033e:	461a      	mov	r2, r3
 8000340:	4b08      	ldr	r3, [pc, #32]	; (8000364 <DP_Output+0x3c>)
 8000342:	5c9a      	ldrb	r2, [r3, r2]
 8000344:	4b0a      	ldr	r3, [pc, #40]	; (8000370 <DP_Output+0x48>)
 8000346:	701a      	strb	r2, [r3, #0]
	DP_Set_DiplayDig3(DP_Show[DP_Index_3]);
 8000348:	4b0a      	ldr	r3, [pc, #40]	; (8000374 <DP_Output+0x4c>)
 800034a:	781b      	ldrb	r3, [r3, #0]
 800034c:	461a      	mov	r2, r3
 800034e:	4b05      	ldr	r3, [pc, #20]	; (8000364 <DP_Output+0x3c>)
 8000350:	5c9a      	ldrb	r2, [r3, r2]
 8000352:	4b09      	ldr	r3, [pc, #36]	; (8000378 <DP_Output+0x50>)
 8000354:	701a      	strb	r2, [r3, #0]
}
 8000356:	bf00      	nop
 8000358:	46bd      	mov	sp, r7
 800035a:	bc80      	pop	{r7}
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop
 8000360:	20000050 	.word	0x20000050
 8000364:	0800251c 	.word	0x0800251c
 8000368:	2000005e 	.word	0x2000005e
 800036c:	20000051 	.word	0x20000051
 8000370:	2000005f 	.word	0x2000005f
 8000374:	20000052 	.word	0x20000052
 8000378:	20000060 	.word	0x20000060

0800037c <MC_Polling>:
 *@Output:none
 *
 **********************************************************
 **/
void MC_Polling(void)
{
 800037c:	b480      	push	{r7}
 800037e:	af00      	add	r7, sp, #0
	static unsigned char PreSate = 0;

	if(MODE_MS == TgMode)
 8000380:	4b26      	ldr	r3, [pc, #152]	; (800041c <MC_Polling+0xa0>)
 8000382:	781b      	ldrb	r3, [r3, #0]
 8000384:	2b00      	cmp	r3, #0
 8000386:	d115      	bne.n	80003b4 <MC_Polling+0x38>
	{
		if((0 == PreSate) && (PRESS == MC_Get_Bt_Mode()))
 8000388:	4b25      	ldr	r3, [pc, #148]	; (8000420 <MC_Polling+0xa4>)
 800038a:	781b      	ldrb	r3, [r3, #0]
 800038c:	2b00      	cmp	r3, #0
 800038e:	d10d      	bne.n	80003ac <MC_Polling+0x30>
 8000390:	4b24      	ldr	r3, [pc, #144]	; (8000424 <MC_Polling+0xa8>)
 8000392:	781b      	ldrb	r3, [r3, #0]
 8000394:	f003 0302 	and.w	r3, r3, #2
 8000398:	b2db      	uxtb	r3, r3
 800039a:	2b00      	cmp	r3, #0
 800039c:	d006      	beq.n	80003ac <MC_Polling+0x30>
		{
			PreSate = 1;
 800039e:	4b20      	ldr	r3, [pc, #128]	; (8000420 <MC_Polling+0xa4>)
 80003a0:	2201      	movs	r2, #1
 80003a2:	701a      	strb	r2, [r3, #0]
			TgMode = MODE_S;
 80003a4:	4b1d      	ldr	r3, [pc, #116]	; (800041c <MC_Polling+0xa0>)
 80003a6:	2201      	movs	r2, #1
 80003a8:	701a      	strb	r2, [r3, #0]
 80003aa:	e033      	b.n	8000414 <MC_Polling+0x98>
		}
		else
		{
			PreSate = 0;
 80003ac:	4b1c      	ldr	r3, [pc, #112]	; (8000420 <MC_Polling+0xa4>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	701a      	strb	r2, [r3, #0]
		else
		{
			PreSate = 0;
		}
	}
}
 80003b2:	e02f      	b.n	8000414 <MC_Polling+0x98>
	else if(MODE_S == TgMode)
 80003b4:	4b19      	ldr	r3, [pc, #100]	; (800041c <MC_Polling+0xa0>)
 80003b6:	781b      	ldrb	r3, [r3, #0]
 80003b8:	2b01      	cmp	r3, #1
 80003ba:	d115      	bne.n	80003e8 <MC_Polling+0x6c>
		if((0 == PreSate) && (PRESS == MC_Get_Bt_Mode()))
 80003bc:	4b18      	ldr	r3, [pc, #96]	; (8000420 <MC_Polling+0xa4>)
 80003be:	781b      	ldrb	r3, [r3, #0]
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d10d      	bne.n	80003e0 <MC_Polling+0x64>
 80003c4:	4b17      	ldr	r3, [pc, #92]	; (8000424 <MC_Polling+0xa8>)
 80003c6:	781b      	ldrb	r3, [r3, #0]
 80003c8:	f003 0302 	and.w	r3, r3, #2
 80003cc:	b2db      	uxtb	r3, r3
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d006      	beq.n	80003e0 <MC_Polling+0x64>
			PreSate = 1;
 80003d2:	4b13      	ldr	r3, [pc, #76]	; (8000420 <MC_Polling+0xa4>)
 80003d4:	2201      	movs	r2, #1
 80003d6:	701a      	strb	r2, [r3, #0]
			TgMode = MODE_10S;
 80003d8:	4b10      	ldr	r3, [pc, #64]	; (800041c <MC_Polling+0xa0>)
 80003da:	2202      	movs	r2, #2
 80003dc:	701a      	strb	r2, [r3, #0]
 80003de:	e019      	b.n	8000414 <MC_Polling+0x98>
			PreSate = 0;
 80003e0:	4b0f      	ldr	r3, [pc, #60]	; (8000420 <MC_Polling+0xa4>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	701a      	strb	r2, [r3, #0]
}
 80003e6:	e015      	b.n	8000414 <MC_Polling+0x98>
		if((0 == PreSate) && (PRESS == MC_Get_Bt_Mode()))
 80003e8:	4b0d      	ldr	r3, [pc, #52]	; (8000420 <MC_Polling+0xa4>)
 80003ea:	781b      	ldrb	r3, [r3, #0]
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d10d      	bne.n	800040c <MC_Polling+0x90>
 80003f0:	4b0c      	ldr	r3, [pc, #48]	; (8000424 <MC_Polling+0xa8>)
 80003f2:	781b      	ldrb	r3, [r3, #0]
 80003f4:	f003 0302 	and.w	r3, r3, #2
 80003f8:	b2db      	uxtb	r3, r3
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d006      	beq.n	800040c <MC_Polling+0x90>
			PreSate = 1;
 80003fe:	4b08      	ldr	r3, [pc, #32]	; (8000420 <MC_Polling+0xa4>)
 8000400:	2201      	movs	r2, #1
 8000402:	701a      	strb	r2, [r3, #0]
			TgMode = MODE_MS;
 8000404:	4b05      	ldr	r3, [pc, #20]	; (800041c <MC_Polling+0xa0>)
 8000406:	2200      	movs	r2, #0
 8000408:	701a      	strb	r2, [r3, #0]
 800040a:	e003      	b.n	8000414 <MC_Polling+0x98>
			PreSate = 0;
 800040c:	4b04      	ldr	r3, [pc, #16]	; (8000420 <MC_Polling+0xa4>)
 800040e:	2200      	movs	r2, #0
 8000410:	701a      	strb	r2, [r3, #0]
}
 8000412:	e7ff      	b.n	8000414 <MC_Polling+0x98>
 8000414:	bf00      	nop
 8000416:	46bd      	mov	sp, r7
 8000418:	bc80      	pop	{r7}
 800041a:	4770      	bx	lr
 800041c:	20000055 	.word	0x20000055
 8000420:	20000056 	.word	0x20000056
 8000424:	20000064 	.word	0x20000064

08000428 <TG_Polling>:
 *@Output:none
 *
 **********************************************************
 **/
void TG_Polling(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0
	static unsigned char PreSate = 0;
	static unsigned char TrigerSate = 0;

	/* Press Trigger button and calculate trigger time and trigger */
	if((0 == PreSate) && (PRESS == TG_Get_TriggerBt()))
 800042c:	4b20      	ldr	r3, [pc, #128]	; (80004b0 <TG_Polling+0x88>)
 800042e:	781b      	ldrb	r3, [r3, #0]
 8000430:	2b00      	cmp	r3, #0
 8000432:	d11e      	bne.n	8000472 <TG_Polling+0x4a>
 8000434:	4b1f      	ldr	r3, [pc, #124]	; (80004b4 <TG_Polling+0x8c>)
 8000436:	78db      	ldrb	r3, [r3, #3]
 8000438:	f003 0302 	and.w	r3, r3, #2
 800043c:	b2db      	uxtb	r3, r3
 800043e:	2b00      	cmp	r3, #0
 8000440:	d017      	beq.n	8000472 <TG_Polling+0x4a>
	{
		PreSate = 1;
 8000442:	4b1b      	ldr	r3, [pc, #108]	; (80004b0 <TG_Polling+0x88>)
 8000444:	2201      	movs	r2, #1
 8000446:	701a      	strb	r2, [r3, #0]
		if(0 == TrigerSate)
 8000448:	4b1b      	ldr	r3, [pc, #108]	; (80004b8 <TG_Polling+0x90>)
 800044a:	781b      	ldrb	r3, [r3, #0]
 800044c:	2b00      	cmp	r3, #0
 800044e:	d113      	bne.n	8000478 <TG_Polling+0x50>
		{
			TG_Time = TG_Calculate_Time(TG_Get_Mode());
 8000450:	4b1a      	ldr	r3, [pc, #104]	; (80004bc <TG_Polling+0x94>)
 8000452:	781b      	ldrb	r3, [r3, #0]
 8000454:	4618      	mov	r0, r3
 8000456:	f000 f837 	bl	80004c8 <TG_Calculate_Time>
 800045a:	4603      	mov	r3, r0
 800045c:	4a18      	ldr	r2, [pc, #96]	; (80004c0 <TG_Polling+0x98>)
 800045e:	6013      	str	r3, [r2, #0]
			TrigerSate = 1;
 8000460:	4b15      	ldr	r3, [pc, #84]	; (80004b8 <TG_Polling+0x90>)
 8000462:	2201      	movs	r2, #1
 8000464:	701a      	strb	r2, [r3, #0]
			TG_Set_Triger();
 8000466:	2201      	movs	r2, #1
 8000468:	2101      	movs	r1, #1
 800046a:	4816      	ldr	r0, [pc, #88]	; (80004c4 <TG_Polling+0x9c>)
 800046c:	f000 ffef 	bl	800144e <HAL_GPIO_WritePin>
		if(0 == TrigerSate)
 8000470:	e002      	b.n	8000478 <TG_Polling+0x50>
		}
	}
	else
	{
		PreSate = 0;
 8000472:	4b0f      	ldr	r3, [pc, #60]	; (80004b0 <TG_Polling+0x88>)
 8000474:	2200      	movs	r2, #0
 8000476:	701a      	strb	r2, [r3, #0]
	}

	/* Wait Release Trigger time and Clear Trigger */
	if((1 == TrigerSate) && (TG_Time != 0))
 8000478:	4b0f      	ldr	r3, [pc, #60]	; (80004b8 <TG_Polling+0x90>)
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	2b01      	cmp	r3, #1
 800047e:	d109      	bne.n	8000494 <TG_Polling+0x6c>
 8000480:	4b0f      	ldr	r3, [pc, #60]	; (80004c0 <TG_Polling+0x98>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	2b00      	cmp	r3, #0
 8000486:	d005      	beq.n	8000494 <TG_Polling+0x6c>
	{
		TG_Time--;
 8000488:	4b0d      	ldr	r3, [pc, #52]	; (80004c0 <TG_Polling+0x98>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	3b01      	subs	r3, #1
 800048e:	4a0c      	ldr	r2, [pc, #48]	; (80004c0 <TG_Polling+0x98>)
 8000490:	6013      	str	r3, [r2, #0]
	}
	else
	{
		/* Keep */
	}
}
 8000492:	e00b      	b.n	80004ac <TG_Polling+0x84>
	else if(0 == TG_Time)
 8000494:	4b0a      	ldr	r3, [pc, #40]	; (80004c0 <TG_Polling+0x98>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	2b00      	cmp	r3, #0
 800049a:	d107      	bne.n	80004ac <TG_Polling+0x84>
		TG_Clear_Triger();
 800049c:	2200      	movs	r2, #0
 800049e:	2101      	movs	r1, #1
 80004a0:	4808      	ldr	r0, [pc, #32]	; (80004c4 <TG_Polling+0x9c>)
 80004a2:	f000 ffd4 	bl	800144e <HAL_GPIO_WritePin>
		TrigerSate = 0;
 80004a6:	4b04      	ldr	r3, [pc, #16]	; (80004b8 <TG_Polling+0x90>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	701a      	strb	r2, [r3, #0]
}
 80004ac:	bf00      	nop
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	2000005c 	.word	0x2000005c
 80004b4:	20000064 	.word	0x20000064
 80004b8:	2000005d 	.word	0x2000005d
 80004bc:	20000055 	.word	0x20000055
 80004c0:	20000058 	.word	0x20000058
 80004c4:	40010c00 	.word	0x40010c00

080004c8 <TG_Calculate_Time>:
 *@Output:none
 *
 **********************************************************
 **/
static unsigned long TG_Calculate_Time(eMode Mode)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b085      	sub	sp, #20
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4603      	mov	r3, r0
 80004d0:	71fb      	strb	r3, [r7, #7]
	 unsigned char SiglePlaces = 0;
 80004d2:	2300      	movs	r3, #0
 80004d4:	72fb      	strb	r3, [r7, #11]
	 unsigned char TenPlaces = 0;
 80004d6:	2300      	movs	r3, #0
 80004d8:	72bb      	strb	r3, [r7, #10]
	 unsigned char HundredPlaces = 0;
 80004da:	2300      	movs	r3, #0
 80004dc:	727b      	strb	r3, [r7, #9]
	 unsigned long countTime = 0;
 80004de:	2300      	movs	r3, #0
 80004e0:	60fb      	str	r3, [r7, #12]

	 /* Get Trigger time */
	 SiglePlaces = TG_Get_SiglePlaces();
 80004e2:	4b25      	ldr	r3, [pc, #148]	; (8000578 <TG_Calculate_Time+0xb0>)
 80004e4:	781b      	ldrb	r3, [r3, #0]
 80004e6:	72fb      	strb	r3, [r7, #11]
	 TenPlaces = TG_Get_TenPlaces();
 80004e8:	4b24      	ldr	r3, [pc, #144]	; (800057c <TG_Calculate_Time+0xb4>)
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	72bb      	strb	r3, [r7, #10]
	 HundredPlaces = TG_Get_HundredPlaces();
 80004ee:	4b24      	ldr	r3, [pc, #144]	; (8000580 <TG_Calculate_Time+0xb8>)
 80004f0:	781b      	ldrb	r3, [r3, #0]
 80004f2:	727b      	strb	r3, [r7, #9]

	 if(MODE_MS == Mode)
 80004f4:	79fb      	ldrb	r3, [r7, #7]
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d10d      	bne.n	8000516 <TG_Calculate_Time+0x4e>
	 {
		 countTime = (unsigned long)(SiglePlaces + (TenPlaces * 10u) + (HundredPlaces * 100u));
 80004fa:	7af9      	ldrb	r1, [r7, #11]
 80004fc:	7a7b      	ldrb	r3, [r7, #9]
 80004fe:	2264      	movs	r2, #100	; 0x64
 8000500:	fb02 f003 	mul.w	r0, r2, r3
 8000504:	7aba      	ldrb	r2, [r7, #10]
 8000506:	4613      	mov	r3, r2
 8000508:	009b      	lsls	r3, r3, #2
 800050a:	4413      	add	r3, r2
 800050c:	005b      	lsls	r3, r3, #1
 800050e:	4403      	add	r3, r0
 8000510:	440b      	add	r3, r1
 8000512:	60fb      	str	r3, [r7, #12]
 8000514:	e029      	b.n	800056a <TG_Calculate_Time+0xa2>
	 }
	 else if(MODE_S == Mode)
 8000516:	79fb      	ldrb	r3, [r7, #7]
 8000518:	2b01      	cmp	r3, #1
 800051a:	d113      	bne.n	8000544 <TG_Calculate_Time+0x7c>
	 {
		 countTime = (unsigned long)(SiglePlaces + (TenPlaces * 10u) + (HundredPlaces * 100u));
 800051c:	7af9      	ldrb	r1, [r7, #11]
 800051e:	7a7b      	ldrb	r3, [r7, #9]
 8000520:	2264      	movs	r2, #100	; 0x64
 8000522:	fb02 f003 	mul.w	r0, r2, r3
 8000526:	7aba      	ldrb	r2, [r7, #10]
 8000528:	4613      	mov	r3, r2
 800052a:	009b      	lsls	r3, r3, #2
 800052c:	4413      	add	r3, r2
 800052e:	005b      	lsls	r3, r3, #1
 8000530:	4403      	add	r3, r0
 8000532:	440b      	add	r3, r1
 8000534:	60fb      	str	r3, [r7, #12]
		 countTime = (unsigned long)(countTime * 1000u);
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800053c:	fb02 f303 	mul.w	r3, r2, r3
 8000540:	60fb      	str	r3, [r7, #12]
 8000542:	e012      	b.n	800056a <TG_Calculate_Time+0xa2>
	 }
	 else
	 {
		 countTime = (unsigned long)(SiglePlaces + (TenPlaces * 10u) + (HundredPlaces * 100u));
 8000544:	7af9      	ldrb	r1, [r7, #11]
 8000546:	7a7b      	ldrb	r3, [r7, #9]
 8000548:	2264      	movs	r2, #100	; 0x64
 800054a:	fb02 f003 	mul.w	r0, r2, r3
 800054e:	7aba      	ldrb	r2, [r7, #10]
 8000550:	4613      	mov	r3, r2
 8000552:	009b      	lsls	r3, r3, #2
 8000554:	4413      	add	r3, r2
 8000556:	005b      	lsls	r3, r3, #1
 8000558:	4403      	add	r3, r0
 800055a:	440b      	add	r3, r1
 800055c:	60fb      	str	r3, [r7, #12]
		 countTime = (unsigned long)(countTime * 10000u);
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	f242 7210 	movw	r2, #10000	; 0x2710
 8000564:	fb02 f303 	mul.w	r3, r2, r3
 8000568:	60fb      	str	r3, [r7, #12]
	 }

	 return countTime;
 800056a:	68fb      	ldr	r3, [r7, #12]
}
 800056c:	4618      	mov	r0, r3
 800056e:	3714      	adds	r7, #20
 8000570:	46bd      	mov	sp, r7
 8000572:	bc80      	pop	{r7}
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop
 8000578:	20000050 	.word	0x20000050
 800057c:	20000051 	.word	0x20000051
 8000580:	20000052 	.word	0x20000052

08000584 <DT_Polling>:
 *@Output:none
 *
 **********************************************************
 **/
void DT_Polling(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
	static unsigned char cnt = 0;

	if(cnt > 2)
 8000588:	4b11      	ldr	r3, [pc, #68]	; (80005d0 <DT_Polling+0x4c>)
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	2b02      	cmp	r3, #2
 800058e:	d902      	bls.n	8000596 <DT_Polling+0x12>
	{
		cnt = 0;
 8000590:	4b0f      	ldr	r3, [pc, #60]	; (80005d0 <DT_Polling+0x4c>)
 8000592:	2200      	movs	r2, #0
 8000594:	701a      	strb	r2, [r3, #0]
	}

	switch(cnt)
 8000596:	4b0e      	ldr	r3, [pc, #56]	; (80005d0 <DT_Polling+0x4c>)
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	2b02      	cmp	r3, #2
 800059c:	d00c      	beq.n	80005b8 <DT_Polling+0x34>
 800059e:	2b02      	cmp	r3, #2
 80005a0:	dc0d      	bgt.n	80005be <DT_Polling+0x3a>
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d002      	beq.n	80005ac <DT_Polling+0x28>
 80005a6:	2b01      	cmp	r3, #1
 80005a8:	d003      	beq.n	80005b2 <DT_Polling+0x2e>
 80005aa:	e008      	b.n	80005be <DT_Polling+0x3a>
	{
		case 0:DT_Display_DIG1();break;
 80005ac:	f000 f812 	bl	80005d4 <DT_Display_DIG1>
 80005b0:	e005      	b.n	80005be <DT_Polling+0x3a>
		case 1:DT_Display_DIG2();break;
 80005b2:	f000 f831 	bl	8000618 <DT_Display_DIG2>
 80005b6:	e002      	b.n	80005be <DT_Polling+0x3a>
		case 2:DT_Display_DIG3();break;
 80005b8:	f000 f850 	bl	800065c <DT_Display_DIG3>
 80005bc:	bf00      	nop
	}

	cnt++;
 80005be:	4b04      	ldr	r3, [pc, #16]	; (80005d0 <DT_Polling+0x4c>)
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	3301      	adds	r3, #1
 80005c4:	b2da      	uxtb	r2, r3
 80005c6:	4b02      	ldr	r3, [pc, #8]	; (80005d0 <DT_Polling+0x4c>)
 80005c8:	701a      	strb	r2, [r3, #0]
}
 80005ca:	bf00      	nop
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	20000061 	.word	0x20000061

080005d4 <DT_Display_DIG1>:
 *@Output:none
 *
 **********************************************************
 **/
static void DT_Display_DIG1(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
	DT_Enable_DIG1();
 80005d8:	2201      	movs	r2, #1
 80005da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005de:	480b      	ldr	r0, [pc, #44]	; (800060c <DT_Display_DIG1+0x38>)
 80005e0:	f000 ff35 	bl	800144e <HAL_GPIO_WritePin>
	DT_Disable_DIG2();
 80005e4:	2200      	movs	r2, #0
 80005e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005ea:	4808      	ldr	r0, [pc, #32]	; (800060c <DT_Display_DIG1+0x38>)
 80005ec:	f000 ff2f 	bl	800144e <HAL_GPIO_WritePin>
	DT_Disable_DIG3();
 80005f0:	2200      	movs	r2, #0
 80005f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005f6:	4806      	ldr	r0, [pc, #24]	; (8000610 <DT_Display_DIG1+0x3c>)
 80005f8:	f000 ff29 	bl	800144e <HAL_GPIO_WritePin>
	DT_Display(DisplayDig1);
 80005fc:	4b05      	ldr	r3, [pc, #20]	; (8000614 <DT_Display_DIG1+0x40>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	4618      	mov	r0, r3
 8000602:	f000 f84d 	bl	80006a0 <DT_Display>
}
 8000606:	bf00      	nop
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	40011000 	.word	0x40011000
 8000610:	40010800 	.word	0x40010800
 8000614:	2000005e 	.word	0x2000005e

08000618 <DT_Display_DIG2>:
 *@Output:none
 *
 **********************************************************
 **/
static void DT_Display_DIG2(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
	DT_Disable_DIG1();
 800061c:	2200      	movs	r2, #0
 800061e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000622:	480b      	ldr	r0, [pc, #44]	; (8000650 <DT_Display_DIG2+0x38>)
 8000624:	f000 ff13 	bl	800144e <HAL_GPIO_WritePin>
	DT_Enable_DIG2();
 8000628:	2201      	movs	r2, #1
 800062a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800062e:	4808      	ldr	r0, [pc, #32]	; (8000650 <DT_Display_DIG2+0x38>)
 8000630:	f000 ff0d 	bl	800144e <HAL_GPIO_WritePin>
	DT_Disable_DIG3();
 8000634:	2200      	movs	r2, #0
 8000636:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800063a:	4806      	ldr	r0, [pc, #24]	; (8000654 <DT_Display_DIG2+0x3c>)
 800063c:	f000 ff07 	bl	800144e <HAL_GPIO_WritePin>
	DT_Display(DisplayDig2);
 8000640:	4b05      	ldr	r3, [pc, #20]	; (8000658 <DT_Display_DIG2+0x40>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	4618      	mov	r0, r3
 8000646:	f000 f82b 	bl	80006a0 <DT_Display>
}
 800064a:	bf00      	nop
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	40011000 	.word	0x40011000
 8000654:	40010800 	.word	0x40010800
 8000658:	2000005f 	.word	0x2000005f

0800065c <DT_Display_DIG3>:
 *@Output:none
 *
 **********************************************************
 **/
static void DT_Display_DIG3(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
	DT_Disable_DIG1();
 8000660:	2200      	movs	r2, #0
 8000662:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000666:	480b      	ldr	r0, [pc, #44]	; (8000694 <DT_Display_DIG3+0x38>)
 8000668:	f000 fef1 	bl	800144e <HAL_GPIO_WritePin>
	DT_Disable_DIG2();
 800066c:	2200      	movs	r2, #0
 800066e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000672:	4808      	ldr	r0, [pc, #32]	; (8000694 <DT_Display_DIG3+0x38>)
 8000674:	f000 feeb 	bl	800144e <HAL_GPIO_WritePin>
	DT_Enable_DIG3();
 8000678:	2201      	movs	r2, #1
 800067a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800067e:	4806      	ldr	r0, [pc, #24]	; (8000698 <DT_Display_DIG3+0x3c>)
 8000680:	f000 fee5 	bl	800144e <HAL_GPIO_WritePin>
	DT_Display(DisplayDig3);
 8000684:	4b05      	ldr	r3, [pc, #20]	; (800069c <DT_Display_DIG3+0x40>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	4618      	mov	r0, r3
 800068a:	f000 f809 	bl	80006a0 <DT_Display>
}
 800068e:	bf00      	nop
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	40011000 	.word	0x40011000
 8000698:	40010800 	.word	0x40010800
 800069c:	20000060 	.word	0x20000060

080006a0 <DT_Display>:
 *@Output:none
 *
 **********************************************************
 **/
static void DT_Display(unsigned char DisplayDig)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	4603      	mov	r3, r0
 80006a8:	71fb      	strb	r3, [r7, #7]
	if((DisplayDig >> 0u) & 0x01u)
 80006aa:	79fb      	ldrb	r3, [r7, #7]
 80006ac:	f003 0301 	and.w	r3, r3, #1
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d006      	beq.n	80006c2 <DT_Display+0x22>
	{
		DT_Enable_DIG_A();
 80006b4:	2200      	movs	r2, #0
 80006b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006ba:	4849      	ldr	r0, [pc, #292]	; (80007e0 <DT_Display+0x140>)
 80006bc:	f000 fec7 	bl	800144e <HAL_GPIO_WritePin>
 80006c0:	e005      	b.n	80006ce <DT_Display+0x2e>
	}
	else
	{
		DT_Disable_DIG_A();
 80006c2:	2201      	movs	r2, #1
 80006c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006c8:	4845      	ldr	r0, [pc, #276]	; (80007e0 <DT_Display+0x140>)
 80006ca:	f000 fec0 	bl	800144e <HAL_GPIO_WritePin>
	}

	if((DisplayDig >> 1u) & 0x01u)
 80006ce:	79fb      	ldrb	r3, [r7, #7]
 80006d0:	085b      	lsrs	r3, r3, #1
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	f003 0301 	and.w	r3, r3, #1
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d006      	beq.n	80006ea <DT_Display+0x4a>
	{
		DT_Enable_DIG_B();
 80006dc:	2200      	movs	r2, #0
 80006de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006e2:	4840      	ldr	r0, [pc, #256]	; (80007e4 <DT_Display+0x144>)
 80006e4:	f000 feb3 	bl	800144e <HAL_GPIO_WritePin>
 80006e8:	e005      	b.n	80006f6 <DT_Display+0x56>
	}
	else
	{
		DT_Disable_DIG_B();
 80006ea:	2201      	movs	r2, #1
 80006ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006f0:	483c      	ldr	r0, [pc, #240]	; (80007e4 <DT_Display+0x144>)
 80006f2:	f000 feac 	bl	800144e <HAL_GPIO_WritePin>
	}

	if((DisplayDig >> 2u) & 0x01u)
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	089b      	lsrs	r3, r3, #2
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	f003 0301 	and.w	r3, r3, #1
 8000700:	2b00      	cmp	r3, #0
 8000702:	d006      	beq.n	8000712 <DT_Display+0x72>
	{
		DT_Enable_DIG_C();
 8000704:	2200      	movs	r2, #0
 8000706:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800070a:	4836      	ldr	r0, [pc, #216]	; (80007e4 <DT_Display+0x144>)
 800070c:	f000 fe9f 	bl	800144e <HAL_GPIO_WritePin>
 8000710:	e005      	b.n	800071e <DT_Display+0x7e>
	}
	else
	{
		DT_Disable_DIG_C();
 8000712:	2201      	movs	r2, #1
 8000714:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000718:	4832      	ldr	r0, [pc, #200]	; (80007e4 <DT_Display+0x144>)
 800071a:	f000 fe98 	bl	800144e <HAL_GPIO_WritePin>
	}

	if((DisplayDig >> 3u) & 0x01u)
 800071e:	79fb      	ldrb	r3, [r7, #7]
 8000720:	08db      	lsrs	r3, r3, #3
 8000722:	b2db      	uxtb	r3, r3
 8000724:	f003 0301 	and.w	r3, r3, #1
 8000728:	2b00      	cmp	r3, #0
 800072a:	d006      	beq.n	800073a <DT_Display+0x9a>
	{
		DT_Enable_DIG_D();
 800072c:	2200      	movs	r2, #0
 800072e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000732:	482c      	ldr	r0, [pc, #176]	; (80007e4 <DT_Display+0x144>)
 8000734:	f000 fe8b 	bl	800144e <HAL_GPIO_WritePin>
 8000738:	e005      	b.n	8000746 <DT_Display+0xa6>
	}
	else
	{
		DT_Disable_DIG_D();
 800073a:	2201      	movs	r2, #1
 800073c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000740:	4828      	ldr	r0, [pc, #160]	; (80007e4 <DT_Display+0x144>)
 8000742:	f000 fe84 	bl	800144e <HAL_GPIO_WritePin>
	}

	if((DisplayDig >> 4u) & 0x01u)
 8000746:	79fb      	ldrb	r3, [r7, #7]
 8000748:	091b      	lsrs	r3, r3, #4
 800074a:	b2db      	uxtb	r3, r3
 800074c:	f003 0301 	and.w	r3, r3, #1
 8000750:	2b00      	cmp	r3, #0
 8000752:	d005      	beq.n	8000760 <DT_Display+0xc0>
	{
		DT_Enable_DIG_E();
 8000754:	2200      	movs	r2, #0
 8000756:	2120      	movs	r1, #32
 8000758:	4822      	ldr	r0, [pc, #136]	; (80007e4 <DT_Display+0x144>)
 800075a:	f000 fe78 	bl	800144e <HAL_GPIO_WritePin>
 800075e:	e004      	b.n	800076a <DT_Display+0xca>
	}
	else
	{
		DT_Disable_DIG_E();
 8000760:	2201      	movs	r2, #1
 8000762:	2120      	movs	r1, #32
 8000764:	481f      	ldr	r0, [pc, #124]	; (80007e4 <DT_Display+0x144>)
 8000766:	f000 fe72 	bl	800144e <HAL_GPIO_WritePin>
	}

	if((DisplayDig >> 5u) & 0x01u)
 800076a:	79fb      	ldrb	r3, [r7, #7]
 800076c:	095b      	lsrs	r3, r3, #5
 800076e:	b2db      	uxtb	r3, r3
 8000770:	f003 0301 	and.w	r3, r3, #1
 8000774:	2b00      	cmp	r3, #0
 8000776:	d005      	beq.n	8000784 <DT_Display+0xe4>
	{
		DT_Enable_DIG_F();
 8000778:	2200      	movs	r2, #0
 800077a:	2110      	movs	r1, #16
 800077c:	4819      	ldr	r0, [pc, #100]	; (80007e4 <DT_Display+0x144>)
 800077e:	f000 fe66 	bl	800144e <HAL_GPIO_WritePin>
 8000782:	e004      	b.n	800078e <DT_Display+0xee>
	}
	else
	{
		DT_Disable_DIG_F();
 8000784:	2201      	movs	r2, #1
 8000786:	2110      	movs	r1, #16
 8000788:	4816      	ldr	r0, [pc, #88]	; (80007e4 <DT_Display+0x144>)
 800078a:	f000 fe60 	bl	800144e <HAL_GPIO_WritePin>
	}

	if((DisplayDig >> 6u) & 0x01u)
 800078e:	79fb      	ldrb	r3, [r7, #7]
 8000790:	099b      	lsrs	r3, r3, #6
 8000792:	b2db      	uxtb	r3, r3
 8000794:	f003 0301 	and.w	r3, r3, #1
 8000798:	2b00      	cmp	r3, #0
 800079a:	d005      	beq.n	80007a8 <DT_Display+0x108>
	{
		DT_Enable_DIG_G();
 800079c:	2200      	movs	r2, #0
 800079e:	2108      	movs	r1, #8
 80007a0:	4810      	ldr	r0, [pc, #64]	; (80007e4 <DT_Display+0x144>)
 80007a2:	f000 fe54 	bl	800144e <HAL_GPIO_WritePin>
 80007a6:	e004      	b.n	80007b2 <DT_Display+0x112>
	}
	else
	{
		DT_Disable_DIG_G();
 80007a8:	2201      	movs	r2, #1
 80007aa:	2108      	movs	r1, #8
 80007ac:	480d      	ldr	r0, [pc, #52]	; (80007e4 <DT_Display+0x144>)
 80007ae:	f000 fe4e 	bl	800144e <HAL_GPIO_WritePin>
	}

	if((DisplayDig >> 7u) & 0x01u)
 80007b2:	79fb      	ldrb	r3, [r7, #7]
 80007b4:	09db      	lsrs	r3, r3, #7
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	f003 0301 	and.w	r3, r3, #1
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d005      	beq.n	80007cc <DT_Display+0x12c>
	{
		DT_Enable_DIG_DP();
 80007c0:	2200      	movs	r2, #0
 80007c2:	2104      	movs	r1, #4
 80007c4:	4807      	ldr	r0, [pc, #28]	; (80007e4 <DT_Display+0x144>)
 80007c6:	f000 fe42 	bl	800144e <HAL_GPIO_WritePin>
	}
	else
	{
		DT_Disable_DIG_DP();
	}
}
 80007ca:	e004      	b.n	80007d6 <DT_Display+0x136>
		DT_Disable_DIG_DP();
 80007cc:	2201      	movs	r2, #1
 80007ce:	2104      	movs	r1, #4
 80007d0:	4804      	ldr	r0, [pc, #16]	; (80007e4 <DT_Display+0x144>)
 80007d2:	f000 fe3c 	bl	800144e <HAL_GPIO_WritePin>
}
 80007d6:	bf00      	nop
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40010800 	.word	0x40010800
 80007e4:	40010c00 	.word	0x40010c00

080007e8 <InM_Gather>:
 *@Output:none
 *
 **********************************************************
 **/
void InM_Gather(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
	KeyPress[MODE].RealState = InM_ReadMode();
 80007ec:	2101      	movs	r1, #1
 80007ee:	481a      	ldr	r0, [pc, #104]	; (8000858 <InM_Gather+0x70>)
 80007f0:	f000 fe16 	bl	8001420 <HAL_GPIO_ReadPin>
 80007f4:	4603      	mov	r3, r0
 80007f6:	f003 0301 	and.w	r3, r3, #1
 80007fa:	b2d9      	uxtb	r1, r3
 80007fc:	4a17      	ldr	r2, [pc, #92]	; (800085c <InM_Gather+0x74>)
 80007fe:	7813      	ldrb	r3, [r2, #0]
 8000800:	f361 0300 	bfi	r3, r1, #0, #1
 8000804:	7013      	strb	r3, [r2, #0]
	KeyPress[TIMEUP].RealState = InM_ReadTimeUp();
 8000806:	2102      	movs	r1, #2
 8000808:	4813      	ldr	r0, [pc, #76]	; (8000858 <InM_Gather+0x70>)
 800080a:	f000 fe09 	bl	8001420 <HAL_GPIO_ReadPin>
 800080e:	4603      	mov	r3, r0
 8000810:	f003 0301 	and.w	r3, r3, #1
 8000814:	b2d9      	uxtb	r1, r3
 8000816:	4a11      	ldr	r2, [pc, #68]	; (800085c <InM_Gather+0x74>)
 8000818:	7853      	ldrb	r3, [r2, #1]
 800081a:	f361 0300 	bfi	r3, r1, #0, #1
 800081e:	7053      	strb	r3, [r2, #1]
	KeyPress[TIMEDOWN].RealState = InM_ReadTimeDown();
 8000820:	2110      	movs	r1, #16
 8000822:	480d      	ldr	r0, [pc, #52]	; (8000858 <InM_Gather+0x70>)
 8000824:	f000 fdfc 	bl	8001420 <HAL_GPIO_ReadPin>
 8000828:	4603      	mov	r3, r0
 800082a:	f003 0301 	and.w	r3, r3, #1
 800082e:	b2d9      	uxtb	r1, r3
 8000830:	4a0a      	ldr	r2, [pc, #40]	; (800085c <InM_Gather+0x74>)
 8000832:	7893      	ldrb	r3, [r2, #2]
 8000834:	f361 0300 	bfi	r3, r1, #0, #1
 8000838:	7093      	strb	r3, [r2, #2]
	KeyPress[TRIGGER].RealState = InM_ReadTrigger();
 800083a:	2101      	movs	r1, #1
 800083c:	4808      	ldr	r0, [pc, #32]	; (8000860 <InM_Gather+0x78>)
 800083e:	f000 fdef 	bl	8001420 <HAL_GPIO_ReadPin>
 8000842:	4603      	mov	r3, r0
 8000844:	f003 0301 	and.w	r3, r3, #1
 8000848:	b2d9      	uxtb	r1, r3
 800084a:	4a04      	ldr	r2, [pc, #16]	; (800085c <InM_Gather+0x74>)
 800084c:	78d3      	ldrb	r3, [r2, #3]
 800084e:	f361 0300 	bfi	r3, r1, #0, #1
 8000852:	70d3      	strb	r3, [r2, #3]
}
 8000854:	bf00      	nop
 8000856:	bd80      	pop	{r7, pc}
 8000858:	40010800 	.word	0x40010800
 800085c:	20000064 	.word	0x20000064
 8000860:	40010c00 	.word	0x40010c00

08000864 <InM_ButtonDetect>:
 *@Output:none
 *
 **********************************************************
 **/
void InM_ButtonDetect(void)
{
 8000864:	b480      	push	{r7}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
	Button i = MODE;
 800086a:	2300      	movs	r3, #0
 800086c:	71fb      	strb	r3, [r7, #7]

	for(i = MODE; i < BUTTON_NUMBER; i++)
 800086e:	2300      	movs	r3, #0
 8000870:	71fb      	strb	r3, [r7, #7]
 8000872:	e03d      	b.n	80008f0 <InM_ButtonDetect+0x8c>
	{
		if(NOPRESS == KeyPress[i].RealState)
 8000874:	79fb      	ldrb	r3, [r7, #7]
 8000876:	4a23      	ldr	r2, [pc, #140]	; (8000904 <InM_ButtonDetect+0xa0>)
 8000878:	5cd3      	ldrb	r3, [r2, r3]
 800087a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800087e:	b2db      	uxtb	r3, r3
 8000880:	2b00      	cmp	r3, #0
 8000882:	d10c      	bne.n	800089e <InM_ButtonDetect+0x3a>
		{
			KeyPress[i].TimeCnt = InitNumber;
 8000884:	79fa      	ldrb	r2, [r7, #7]
 8000886:	491f      	ldr	r1, [pc, #124]	; (8000904 <InM_ButtonDetect+0xa0>)
 8000888:	5c8b      	ldrb	r3, [r1, r2]
 800088a:	f36f 0386 	bfc	r3, #2, #5
 800088e:	548b      	strb	r3, [r1, r2]
			KeyPress[i].RealState = NOPRESS;
 8000890:	79fa      	ldrb	r2, [r7, #7]
 8000892:	491c      	ldr	r1, [pc, #112]	; (8000904 <InM_ButtonDetect+0xa0>)
 8000894:	5c8b      	ldrb	r3, [r1, r2]
 8000896:	f36f 0300 	bfc	r3, #0, #1
 800089a:	548b      	strb	r3, [r1, r2]
 800089c:	e025      	b.n	80008ea <InM_ButtonDetect+0x86>
		}
		else if((PRESS == KeyPress[i].RealState)
 800089e:	79fb      	ldrb	r3, [r7, #7]
 80008a0:	4a18      	ldr	r2, [pc, #96]	; (8000904 <InM_ButtonDetect+0xa0>)
 80008a2:	5cd3      	ldrb	r3, [r2, r3]
 80008a4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	2b01      	cmp	r3, #1
 80008ac:	d117      	bne.n	80008de <InM_ButtonDetect+0x7a>
				&& (FILT_CYCLE < KeyPress[i].TimeCnt))
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	4a14      	ldr	r2, [pc, #80]	; (8000904 <InM_ButtonDetect+0xa0>)
 80008b2:	5cd3      	ldrb	r3, [r2, r3]
 80008b4:	f3c3 0384 	ubfx	r3, r3, #2, #5
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	2b02      	cmp	r3, #2
 80008bc:	d90f      	bls.n	80008de <InM_ButtonDetect+0x7a>
		{
			KeyPress[i].TimeCnt++;
 80008be:	79fb      	ldrb	r3, [r7, #7]
 80008c0:	4a10      	ldr	r2, [pc, #64]	; (8000904 <InM_ButtonDetect+0xa0>)
 80008c2:	5cd2      	ldrb	r2, [r2, r3]
 80008c4:	f3c2 0284 	ubfx	r2, r2, #2, #5
 80008c8:	b2d2      	uxtb	r2, r2
 80008ca:	3201      	adds	r2, #1
 80008cc:	f002 021f 	and.w	r2, r2, #31
 80008d0:	b2d0      	uxtb	r0, r2
 80008d2:	490c      	ldr	r1, [pc, #48]	; (8000904 <InM_ButtonDetect+0xa0>)
 80008d4:	5cca      	ldrb	r2, [r1, r3]
 80008d6:	f360 0286 	bfi	r2, r0, #2, #5
 80008da:	54ca      	strb	r2, [r1, r3]
 80008dc:	e005      	b.n	80008ea <InM_ButtonDetect+0x86>
		}
		else
		{
			KeyPress[i].RealState = PRESS;
 80008de:	79fa      	ldrb	r2, [r7, #7]
 80008e0:	4908      	ldr	r1, [pc, #32]	; (8000904 <InM_ButtonDetect+0xa0>)
 80008e2:	5c8b      	ldrb	r3, [r1, r2]
 80008e4:	f043 0301 	orr.w	r3, r3, #1
 80008e8:	548b      	strb	r3, [r1, r2]
	for(i = MODE; i < BUTTON_NUMBER; i++)
 80008ea:	79fb      	ldrb	r3, [r7, #7]
 80008ec:	3301      	adds	r3, #1
 80008ee:	71fb      	strb	r3, [r7, #7]
 80008f0:	79fb      	ldrb	r3, [r7, #7]
 80008f2:	2b03      	cmp	r3, #3
 80008f4:	d9be      	bls.n	8000874 <InM_ButtonDetect+0x10>
		}
	}
}
 80008f6:	bf00      	nop
 80008f8:	bf00      	nop
 80008fa:	370c      	adds	r7, #12
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bc80      	pop	{r7}
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	20000064 	.word	0x20000064

08000908 <OS_1ms>:
 *The function will be call 1ms loop .
 *
 **********************************************************
 **/
void OS_1ms(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
	TG_Polling();
 800090c:	f7ff fd8c 	bl	8000428 <TG_Polling>
}
 8000910:	bf00      	nop
 8000912:	bd80      	pop	{r7, pc}

08000914 <OS_2ms>:
 *The function will be call 2ms loop .
 *
 **********************************************************
 **/
void OS_2ms(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
	DT_Polling();
 8000918:	f7ff fe34 	bl	8000584 <DT_Polling>
}
 800091c:	bf00      	nop
 800091e:	bd80      	pop	{r7, pc}

08000920 <OS_4ms1>:
 *The function will be call 4ms loop .
 *
 **********************************************************
 **/
void OS_4ms1(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
	InM_Gather();
 8000924:	f7ff ff60 	bl	80007e8 <InM_Gather>
}
 8000928:	bf00      	nop
 800092a:	bd80      	pop	{r7, pc}

0800092c <OS_8ms3>:
 *The function will be call 8ms loop .
 *
 **********************************************************
 **/
void OS_8ms3(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
	InM_ButtonDetect();
 8000930:	f7ff ff98 	bl	8000864 <InM_ButtonDetect>
	MC_Polling();
 8000934:	f7ff fd22 	bl	800037c <MC_Polling>
	DP_Polling();
 8000938:	f7ff fc08 	bl	800014c <DP_Polling>
}
 800093c:	bf00      	nop
 800093e:	bd80      	pop	{r7, pc}

08000940 <OS_8ms7>:
 *The function will be call 8ms loop .
 *
 **********************************************************
 **/
void OS_8ms7(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
	HAL_IWDG_Refresh(&hiwdg);
 8000944:	4802      	ldr	r0, [pc, #8]	; (8000950 <OS_8ms7+0x10>)
 8000946:	f000 fddc 	bl	8001502 <HAL_IWDG_Refresh>
}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	2000006c 	.word	0x2000006c

08000954 <OS_Idle>:
 *The function will be call when idle .
 *
 **********************************************************
 **/
void OS_Idle(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0

}
 8000958:	bf00      	nop
 800095a:	46bd      	mov	sp, r7
 800095c:	bc80      	pop	{r7}
 800095e:	4770      	bx	lr

08000960 <LittleHeartFunc>:
 *The function need be ported to timer for 1ms .
 *
 **********************************************************
 **/
void LittleHeartFunc(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
	LittleHeart = OS_TRUE;
 8000964:	4b03      	ldr	r3, [pc, #12]	; (8000974 <LittleHeartFunc+0x14>)
 8000966:	2201      	movs	r2, #1
 8000968:	701a      	strb	r2, [r3, #0]
}
 800096a:	bf00      	nop
 800096c:	46bd      	mov	sp, r7
 800096e:	bc80      	pop	{r7}
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	20000068 	.word	0x20000068

08000978 <OS>:
 *The function need be ported to main function endless loop.
 *
 ***********************************************************
 **/
void OS(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
	static unsigned char HeartCnt = 0;

	if(LittleHeart == OS_TRUE)
 800097e:	4b1b      	ldr	r3, [pc, #108]	; (80009ec <OS+0x74>)
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	b2db      	uxtb	r3, r3
 8000984:	2b01      	cmp	r3, #1
 8000986:	d12a      	bne.n	80009de <OS+0x66>
	{
		HeartCnt++;
 8000988:	4b19      	ldr	r3, [pc, #100]	; (80009f0 <OS+0x78>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	3301      	adds	r3, #1
 800098e:	b2da      	uxtb	r2, r3
 8000990:	4b17      	ldr	r3, [pc, #92]	; (80009f0 <OS+0x78>)
 8000992:	701a      	strb	r2, [r3, #0]
		LittleHeart = OS_FALSE;
 8000994:	4b15      	ldr	r3, [pc, #84]	; (80009ec <OS+0x74>)
 8000996:	2200      	movs	r2, #0
 8000998:	701a      	strb	r2, [r3, #0]

		/* Scheduler % --> & */
		for (enum TaskIdT i = TaskId_1ms; i < TaskIdNumber; i++)
 800099a:	2300      	movs	r3, #0
 800099c:	71fb      	strb	r3, [r7, #7]
 800099e:	e01a      	b.n	80009d6 <OS+0x5e>
		{
			if (TaskTable[i].Shifting == (HeartCnt & (TaskTable[i].Cycle - 1)))
 80009a0:	79fb      	ldrb	r3, [r7, #7]
 80009a2:	4a14      	ldr	r2, [pc, #80]	; (80009f4 <OS+0x7c>)
 80009a4:	00db      	lsls	r3, r3, #3
 80009a6:	4413      	add	r3, r2
 80009a8:	789b      	ldrb	r3, [r3, #2]
 80009aa:	4619      	mov	r1, r3
 80009ac:	4b10      	ldr	r3, [pc, #64]	; (80009f0 <OS+0x78>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	4618      	mov	r0, r3
 80009b2:	79fb      	ldrb	r3, [r7, #7]
 80009b4:	4a0f      	ldr	r2, [pc, #60]	; (80009f4 <OS+0x7c>)
 80009b6:	00db      	lsls	r3, r3, #3
 80009b8:	4413      	add	r3, r2
 80009ba:	785b      	ldrb	r3, [r3, #1]
 80009bc:	3b01      	subs	r3, #1
 80009be:	4003      	ands	r3, r0
 80009c0:	4299      	cmp	r1, r3
 80009c2:	d105      	bne.n	80009d0 <OS+0x58>
			{
				TaskTable[i].Task();
 80009c4:	79fb      	ldrb	r3, [r7, #7]
 80009c6:	4a0b      	ldr	r2, [pc, #44]	; (80009f4 <OS+0x7c>)
 80009c8:	00db      	lsls	r3, r3, #3
 80009ca:	4413      	add	r3, r2
 80009cc:	685b      	ldr	r3, [r3, #4]
 80009ce:	4798      	blx	r3
		for (enum TaskIdT i = TaskId_1ms; i < TaskIdNumber; i++)
 80009d0:	79fb      	ldrb	r3, [r7, #7]
 80009d2:	3301      	adds	r3, #1
 80009d4:	71fb      	strb	r3, [r7, #7]
 80009d6:	79fb      	ldrb	r3, [r7, #7]
 80009d8:	2b04      	cmp	r3, #4
 80009da:	d9e1      	bls.n	80009a0 <OS+0x28>
	}
	else
	{
		OS_Idle();
	}
}
 80009dc:	e001      	b.n	80009e2 <OS+0x6a>
		OS_Idle();
 80009de:	f7ff ffb9 	bl	8000954 <OS_Idle>
}
 80009e2:	bf00      	nop
 80009e4:	3708      	adds	r7, #8
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	20000068 	.word	0x20000068
 80009f0:	20000069 	.word	0x20000069
 80009f4:	20000000 	.word	0x20000000

080009f8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b088      	sub	sp, #32
 80009fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fe:	f107 0310 	add.w	r3, r7, #16
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	605a      	str	r2, [r3, #4]
 8000a08:	609a      	str	r2, [r3, #8]
 8000a0a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a0c:	4b45      	ldr	r3, [pc, #276]	; (8000b24 <MX_GPIO_Init+0x12c>)
 8000a0e:	699b      	ldr	r3, [r3, #24]
 8000a10:	4a44      	ldr	r2, [pc, #272]	; (8000b24 <MX_GPIO_Init+0x12c>)
 8000a12:	f043 0310 	orr.w	r3, r3, #16
 8000a16:	6193      	str	r3, [r2, #24]
 8000a18:	4b42      	ldr	r3, [pc, #264]	; (8000b24 <MX_GPIO_Init+0x12c>)
 8000a1a:	699b      	ldr	r3, [r3, #24]
 8000a1c:	f003 0310 	and.w	r3, r3, #16
 8000a20:	60fb      	str	r3, [r7, #12]
 8000a22:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a24:	4b3f      	ldr	r3, [pc, #252]	; (8000b24 <MX_GPIO_Init+0x12c>)
 8000a26:	699b      	ldr	r3, [r3, #24]
 8000a28:	4a3e      	ldr	r2, [pc, #248]	; (8000b24 <MX_GPIO_Init+0x12c>)
 8000a2a:	f043 0320 	orr.w	r3, r3, #32
 8000a2e:	6193      	str	r3, [r2, #24]
 8000a30:	4b3c      	ldr	r3, [pc, #240]	; (8000b24 <MX_GPIO_Init+0x12c>)
 8000a32:	699b      	ldr	r3, [r3, #24]
 8000a34:	f003 0320 	and.w	r3, r3, #32
 8000a38:	60bb      	str	r3, [r7, #8]
 8000a3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3c:	4b39      	ldr	r3, [pc, #228]	; (8000b24 <MX_GPIO_Init+0x12c>)
 8000a3e:	699b      	ldr	r3, [r3, #24]
 8000a40:	4a38      	ldr	r2, [pc, #224]	; (8000b24 <MX_GPIO_Init+0x12c>)
 8000a42:	f043 0304 	orr.w	r3, r3, #4
 8000a46:	6193      	str	r3, [r2, #24]
 8000a48:	4b36      	ldr	r3, [pc, #216]	; (8000b24 <MX_GPIO_Init+0x12c>)
 8000a4a:	699b      	ldr	r3, [r3, #24]
 8000a4c:	f003 0304 	and.w	r3, r3, #4
 8000a50:	607b      	str	r3, [r7, #4]
 8000a52:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a54:	4b33      	ldr	r3, [pc, #204]	; (8000b24 <MX_GPIO_Init+0x12c>)
 8000a56:	699b      	ldr	r3, [r3, #24]
 8000a58:	4a32      	ldr	r2, [pc, #200]	; (8000b24 <MX_GPIO_Init+0x12c>)
 8000a5a:	f043 0308 	orr.w	r3, r3, #8
 8000a5e:	6193      	str	r3, [r2, #24]
 8000a60:	4b30      	ldr	r3, [pc, #192]	; (8000b24 <MX_GPIO_Init+0x12c>)
 8000a62:	699b      	ldr	r3, [r3, #24]
 8000a64:	f003 0308 	and.w	r3, r3, #8
 8000a68:	603b      	str	r3, [r7, #0]
 8000a6a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DIG2_Pin|DIG1_Pin, GPIO_PIN_RESET);
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000a72:	482d      	ldr	r0, [pc, #180]	; (8000b28 <MX_GPIO_Init+0x130>)
 8000a74:	f000 fceb 	bl	800144e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Enable_Pin|DP_Pin|DIG_D_Pin|DIG_C_Pin
 8000a78:	2200      	movs	r2, #0
 8000a7a:	f24d 013e 	movw	r1, #53310	; 0xd03e
 8000a7e:	482b      	ldr	r0, [pc, #172]	; (8000b2c <MX_GPIO_Init+0x134>)
 8000a80:	f000 fce5 	bl	800144e <HAL_GPIO_WritePin>
                          |DIG_B_Pin|DIG_G_Pin|DIG_F_Pin|DIG_E_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DIG_A_Pin|DIG3_Pin, GPIO_PIN_RESET);
 8000a84:	2200      	movs	r2, #0
 8000a86:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 8000a8a:	4829      	ldr	r0, [pc, #164]	; (8000b30 <MX_GPIO_Init+0x138>)
 8000a8c:	f000 fcdf 	bl	800144e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = DIG2_Pin|DIG1_Pin;
 8000a90:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000a94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a96:	2301      	movs	r3, #1
 8000a98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aa2:	f107 0310 	add.w	r3, r7, #16
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	481f      	ldr	r0, [pc, #124]	; (8000b28 <MX_GPIO_Init+0x130>)
 8000aaa:	f000 fb3d 	bl	8001128 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Mode_Pin|TimeUp_Pin|TimeDown_Pin;
 8000aae:	2313      	movs	r3, #19
 8000ab0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aba:	f107 0310 	add.w	r3, r7, #16
 8000abe:	4619      	mov	r1, r3
 8000ac0:	481b      	ldr	r0, [pc, #108]	; (8000b30 <MX_GPIO_Init+0x138>)
 8000ac2:	f000 fb31 	bl	8001128 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Trigger_Pin;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aca:	2300      	movs	r3, #0
 8000acc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Trigger_GPIO_Port, &GPIO_InitStruct);
 8000ad2:	f107 0310 	add.w	r3, r7, #16
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4814      	ldr	r0, [pc, #80]	; (8000b2c <MX_GPIO_Init+0x134>)
 8000ada:	f000 fb25 	bl	8001128 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = Enable_Pin|DP_Pin|DIG_D_Pin|DIG_C_Pin
 8000ade:	f24d 033e 	movw	r3, #53310	; 0xd03e
 8000ae2:	613b      	str	r3, [r7, #16]
                          |DIG_B_Pin|DIG_G_Pin|DIG_F_Pin|DIG_E_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aec:	2302      	movs	r3, #2
 8000aee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af0:	f107 0310 	add.w	r3, r7, #16
 8000af4:	4619      	mov	r1, r3
 8000af6:	480d      	ldr	r0, [pc, #52]	; (8000b2c <MX_GPIO_Init+0x134>)
 8000af8:	f000 fb16 	bl	8001128 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = DIG_A_Pin|DIG3_Pin;
 8000afc:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8000b00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b02:	2301      	movs	r3, #1
 8000b04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b06:	2300      	movs	r3, #0
 8000b08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0e:	f107 0310 	add.w	r3, r7, #16
 8000b12:	4619      	mov	r1, r3
 8000b14:	4806      	ldr	r0, [pc, #24]	; (8000b30 <MX_GPIO_Init+0x138>)
 8000b16:	f000 fb07 	bl	8001128 <HAL_GPIO_Init>

}
 8000b1a:	bf00      	nop
 8000b1c:	3720      	adds	r7, #32
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40021000 	.word	0x40021000
 8000b28:	40011000 	.word	0x40011000
 8000b2c:	40010c00 	.word	0x40010c00
 8000b30:	40010800 	.word	0x40010800

08000b34 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000b38:	4b09      	ldr	r3, [pc, #36]	; (8000b60 <MX_IWDG_Init+0x2c>)
 8000b3a:	4a0a      	ldr	r2, [pc, #40]	; (8000b64 <MX_IWDG_Init+0x30>)
 8000b3c:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 8000b3e:	4b08      	ldr	r3, [pc, #32]	; (8000b60 <MX_IWDG_Init+0x2c>)
 8000b40:	2204      	movs	r2, #4
 8000b42:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 625;
 8000b44:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <MX_IWDG_Init+0x2c>)
 8000b46:	f240 2271 	movw	r2, #625	; 0x271
 8000b4a:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000b4c:	4804      	ldr	r0, [pc, #16]	; (8000b60 <MX_IWDG_Init+0x2c>)
 8000b4e:	f000 fc96 	bl	800147e <HAL_IWDG_Init>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8000b58:	f000 f870 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000b5c:	bf00      	nop
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	2000006c 	.word	0x2000006c
 8000b64:	40003000 	.word	0x40003000

08000b68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b6c:	f000 f96c 	bl	8000e48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b70:	f000 f80e 	bl	8000b90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b74:	f7ff ff40 	bl	80009f8 <MX_GPIO_Init>
  MX_IWDG_Init();
 8000b78:	f7ff ffdc 	bl	8000b34 <MX_IWDG_Init>
  MX_TIM2_Init();
 8000b7c:	f000 f8ce 	bl	8000d1c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000b80:	4802      	ldr	r0, [pc, #8]	; (8000b8c <main+0x24>)
 8000b82:	f001 f8fb 	bl	8001d7c <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  OS();
 8000b86:	f7ff fef7 	bl	8000978 <OS>
 8000b8a:	e7fc      	b.n	8000b86 <main+0x1e>
 8000b8c:	20000078 	.word	0x20000078

08000b90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b090      	sub	sp, #64	; 0x40
 8000b94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b96:	f107 0318 	add.w	r3, r7, #24
 8000b9a:	2228      	movs	r2, #40	; 0x28
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f001 fca8 	bl	80024f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ba4:	1d3b      	adds	r3, r7, #4
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	601a      	str	r2, [r3, #0]
 8000baa:	605a      	str	r2, [r3, #4]
 8000bac:	609a      	str	r2, [r3, #8]
 8000bae:	60da      	str	r2, [r3, #12]
 8000bb0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000bb2:	2309      	movs	r3, #9
 8000bb4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bb6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bcc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bd0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000bd2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bd8:	f107 0318 	add.w	r3, r7, #24
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f000 fc9f 	bl	8001520 <HAL_RCC_OscConfig>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000be8:	f000 f828 	bl	8000c3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bec:	230f      	movs	r3, #15
 8000bee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bf8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bfc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c02:	1d3b      	adds	r3, r7, #4
 8000c04:	2102      	movs	r1, #2
 8000c06:	4618      	mov	r0, r3
 8000c08:	f000 ff0c 	bl	8001a24 <HAL_RCC_ClockConfig>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000c12:	f000 f813 	bl	8000c3c <Error_Handler>
  }
}
 8000c16:	bf00      	nop
 8000c18:	3740      	adds	r7, #64	; 0x40
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}

08000c1e <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	b082      	sub	sp, #8
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	6078      	str	r0, [r7, #4]
	if(TIM2 == htim->Instance)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c2e:	d101      	bne.n	8000c34 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		LittleHeartFunc();
 8000c30:	f7ff fe96 	bl	8000960 <LittleHeartFunc>
	}
}
 8000c34:	bf00      	nop
 8000c36:	3708      	adds	r7, #8
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c40:	b672      	cpsid	i
}
 8000c42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c44:	e7fe      	b.n	8000c44 <Error_Handler+0x8>
	...

08000c48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b085      	sub	sp, #20
 8000c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c4e:	4b15      	ldr	r3, [pc, #84]	; (8000ca4 <HAL_MspInit+0x5c>)
 8000c50:	699b      	ldr	r3, [r3, #24]
 8000c52:	4a14      	ldr	r2, [pc, #80]	; (8000ca4 <HAL_MspInit+0x5c>)
 8000c54:	f043 0301 	orr.w	r3, r3, #1
 8000c58:	6193      	str	r3, [r2, #24]
 8000c5a:	4b12      	ldr	r3, [pc, #72]	; (8000ca4 <HAL_MspInit+0x5c>)
 8000c5c:	699b      	ldr	r3, [r3, #24]
 8000c5e:	f003 0301 	and.w	r3, r3, #1
 8000c62:	60bb      	str	r3, [r7, #8]
 8000c64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c66:	4b0f      	ldr	r3, [pc, #60]	; (8000ca4 <HAL_MspInit+0x5c>)
 8000c68:	69db      	ldr	r3, [r3, #28]
 8000c6a:	4a0e      	ldr	r2, [pc, #56]	; (8000ca4 <HAL_MspInit+0x5c>)
 8000c6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c70:	61d3      	str	r3, [r2, #28]
 8000c72:	4b0c      	ldr	r3, [pc, #48]	; (8000ca4 <HAL_MspInit+0x5c>)
 8000c74:	69db      	ldr	r3, [r3, #28]
 8000c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c7a:	607b      	str	r3, [r7, #4]
 8000c7c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c7e:	4b0a      	ldr	r3, [pc, #40]	; (8000ca8 <HAL_MspInit+0x60>)
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	4a04      	ldr	r2, [pc, #16]	; (8000ca8 <HAL_MspInit+0x60>)
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	3714      	adds	r7, #20
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bc80      	pop	{r7}
 8000ca2:	4770      	bx	lr
 8000ca4:	40021000 	.word	0x40021000
 8000ca8:	40010000 	.word	0x40010000

08000cac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cb0:	e7fe      	b.n	8000cb0 <NMI_Handler+0x4>

08000cb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cb6:	e7fe      	b.n	8000cb6 <HardFault_Handler+0x4>

08000cb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cbc:	e7fe      	b.n	8000cbc <MemManage_Handler+0x4>

08000cbe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cc2:	e7fe      	b.n	8000cc2 <BusFault_Handler+0x4>

08000cc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cc8:	e7fe      	b.n	8000cc8 <UsageFault_Handler+0x4>

08000cca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bc80      	pop	{r7}
 8000cd4:	4770      	bx	lr

08000cd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bc80      	pop	{r7}
 8000ce0:	4770      	bx	lr

08000ce2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bc80      	pop	{r7}
 8000cec:	4770      	bx	lr

08000cee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cf2:	f000 f8ef 	bl	8000ed4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}
	...

08000cfc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d00:	4802      	ldr	r0, [pc, #8]	; (8000d0c <TIM2_IRQHandler+0x10>)
 8000d02:	f001 f887 	bl	8001e14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	20000078 	.word	0x20000078

08000d10 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bc80      	pop	{r7}
 8000d1a:	4770      	bx	lr

08000d1c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b086      	sub	sp, #24
 8000d20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d22:	f107 0308 	add.w	r3, r7, #8
 8000d26:	2200      	movs	r2, #0
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	605a      	str	r2, [r3, #4]
 8000d2c:	609a      	str	r2, [r3, #8]
 8000d2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d30:	463b      	mov	r3, r7
 8000d32:	2200      	movs	r2, #0
 8000d34:	601a      	str	r2, [r3, #0]
 8000d36:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d38:	4b1d      	ldr	r3, [pc, #116]	; (8000db0 <MX_TIM2_Init+0x94>)
 8000d3a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d3e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8000d40:	4b1b      	ldr	r3, [pc, #108]	; (8000db0 <MX_TIM2_Init+0x94>)
 8000d42:	2247      	movs	r2, #71	; 0x47
 8000d44:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d46:	4b1a      	ldr	r3, [pc, #104]	; (8000db0 <MX_TIM2_Init+0x94>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000d4c:	4b18      	ldr	r3, [pc, #96]	; (8000db0 <MX_TIM2_Init+0x94>)
 8000d4e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d52:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d54:	4b16      	ldr	r3, [pc, #88]	; (8000db0 <MX_TIM2_Init+0x94>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d5a:	4b15      	ldr	r3, [pc, #84]	; (8000db0 <MX_TIM2_Init+0x94>)
 8000d5c:	2280      	movs	r2, #128	; 0x80
 8000d5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d60:	4813      	ldr	r0, [pc, #76]	; (8000db0 <MX_TIM2_Init+0x94>)
 8000d62:	f000 ffbb 	bl	8001cdc <HAL_TIM_Base_Init>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000d6c:	f7ff ff66 	bl	8000c3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d74:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d76:	f107 0308 	add.w	r3, r7, #8
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	480c      	ldr	r0, [pc, #48]	; (8000db0 <MX_TIM2_Init+0x94>)
 8000d7e:	f001 f951 	bl	8002024 <HAL_TIM_ConfigClockSource>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000d88:	f7ff ff58 	bl	8000c3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d90:	2300      	movs	r3, #0
 8000d92:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d94:	463b      	mov	r3, r7
 8000d96:	4619      	mov	r1, r3
 8000d98:	4805      	ldr	r0, [pc, #20]	; (8000db0 <MX_TIM2_Init+0x94>)
 8000d9a:	f001 fb1d 	bl	80023d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000da4:	f7ff ff4a 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000da8:	bf00      	nop
 8000daa:	3718      	adds	r7, #24
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	20000078 	.word	0x20000078

08000db4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000dc4:	d113      	bne.n	8000dee <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000dc6:	4b0c      	ldr	r3, [pc, #48]	; (8000df8 <HAL_TIM_Base_MspInit+0x44>)
 8000dc8:	69db      	ldr	r3, [r3, #28]
 8000dca:	4a0b      	ldr	r2, [pc, #44]	; (8000df8 <HAL_TIM_Base_MspInit+0x44>)
 8000dcc:	f043 0301 	orr.w	r3, r3, #1
 8000dd0:	61d3      	str	r3, [r2, #28]
 8000dd2:	4b09      	ldr	r3, [pc, #36]	; (8000df8 <HAL_TIM_Base_MspInit+0x44>)
 8000dd4:	69db      	ldr	r3, [r3, #28]
 8000dd6:	f003 0301 	and.w	r3, r3, #1
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000dde:	2200      	movs	r2, #0
 8000de0:	2100      	movs	r1, #0
 8000de2:	201c      	movs	r0, #28
 8000de4:	f000 f969 	bl	80010ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000de8:	201c      	movs	r0, #28
 8000dea:	f000 f982 	bl	80010f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000dee:	bf00      	nop
 8000df0:	3710      	adds	r7, #16
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	40021000 	.word	0x40021000

08000dfc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000dfc:	f7ff ff88 	bl	8000d10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e00:	480b      	ldr	r0, [pc, #44]	; (8000e30 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e02:	490c      	ldr	r1, [pc, #48]	; (8000e34 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e04:	4a0c      	ldr	r2, [pc, #48]	; (8000e38 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e08:	e002      	b.n	8000e10 <LoopCopyDataInit>

08000e0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e0e:	3304      	adds	r3, #4

08000e10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e14:	d3f9      	bcc.n	8000e0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e16:	4a09      	ldr	r2, [pc, #36]	; (8000e3c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e18:	4c09      	ldr	r4, [pc, #36]	; (8000e40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e1c:	e001      	b.n	8000e22 <LoopFillZerobss>

08000e1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e20:	3204      	adds	r2, #4

08000e22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e24:	d3fb      	bcc.n	8000e1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e26:	f001 fb41 	bl	80024ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e2a:	f7ff fe9d 	bl	8000b68 <main>
  bx lr
 8000e2e:	4770      	bx	lr
  ldr r0, =_sdata
 8000e30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e34:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 8000e38:	08002554 	.word	0x08002554
  ldr r2, =_sbss
 8000e3c:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 8000e40:	200000c4 	.word	0x200000c4

08000e44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e44:	e7fe      	b.n	8000e44 <ADC1_2_IRQHandler>
	...

08000e48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e4c:	4b08      	ldr	r3, [pc, #32]	; (8000e70 <HAL_Init+0x28>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a07      	ldr	r2, [pc, #28]	; (8000e70 <HAL_Init+0x28>)
 8000e52:	f043 0310 	orr.w	r3, r3, #16
 8000e56:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e58:	2003      	movs	r0, #3
 8000e5a:	f000 f923 	bl	80010a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e5e:	200f      	movs	r0, #15
 8000e60:	f000 f808 	bl	8000e74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e64:	f7ff fef0 	bl	8000c48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e68:	2300      	movs	r3, #0
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	40022000 	.word	0x40022000

08000e74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e7c:	4b12      	ldr	r3, [pc, #72]	; (8000ec8 <HAL_InitTick+0x54>)
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	4b12      	ldr	r3, [pc, #72]	; (8000ecc <HAL_InitTick+0x58>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	4619      	mov	r1, r3
 8000e86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e92:	4618      	mov	r0, r3
 8000e94:	f000 f93b 	bl	800110e <HAL_SYSTICK_Config>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e00e      	b.n	8000ec0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2b0f      	cmp	r3, #15
 8000ea6:	d80a      	bhi.n	8000ebe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	6879      	ldr	r1, [r7, #4]
 8000eac:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb0:	f000 f903 	bl	80010ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eb4:	4a06      	ldr	r2, [pc, #24]	; (8000ed0 <HAL_InitTick+0x5c>)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	e000      	b.n	8000ec0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3708      	adds	r7, #8
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	20000028 	.word	0x20000028
 8000ecc:	20000030 	.word	0x20000030
 8000ed0:	2000002c 	.word	0x2000002c

08000ed4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ed8:	4b05      	ldr	r3, [pc, #20]	; (8000ef0 <HAL_IncTick+0x1c>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	461a      	mov	r2, r3
 8000ede:	4b05      	ldr	r3, [pc, #20]	; (8000ef4 <HAL_IncTick+0x20>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4413      	add	r3, r2
 8000ee4:	4a03      	ldr	r2, [pc, #12]	; (8000ef4 <HAL_IncTick+0x20>)
 8000ee6:	6013      	str	r3, [r2, #0]
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bc80      	pop	{r7}
 8000eee:	4770      	bx	lr
 8000ef0:	20000030 	.word	0x20000030
 8000ef4:	200000c0 	.word	0x200000c0

08000ef8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  return uwTick;
 8000efc:	4b02      	ldr	r3, [pc, #8]	; (8000f08 <HAL_GetTick+0x10>)
 8000efe:	681b      	ldr	r3, [r3, #0]
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bc80      	pop	{r7}
 8000f06:	4770      	bx	lr
 8000f08:	200000c0 	.word	0x200000c0

08000f0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b085      	sub	sp, #20
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	f003 0307 	and.w	r3, r3, #7
 8000f1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f1c:	4b0c      	ldr	r3, [pc, #48]	; (8000f50 <__NVIC_SetPriorityGrouping+0x44>)
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f22:	68ba      	ldr	r2, [r7, #8]
 8000f24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f28:	4013      	ands	r3, r2
 8000f2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f3e:	4a04      	ldr	r2, [pc, #16]	; (8000f50 <__NVIC_SetPriorityGrouping+0x44>)
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	60d3      	str	r3, [r2, #12]
}
 8000f44:	bf00      	nop
 8000f46:	3714      	adds	r7, #20
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bc80      	pop	{r7}
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	e000ed00 	.word	0xe000ed00

08000f54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f58:	4b04      	ldr	r3, [pc, #16]	; (8000f6c <__NVIC_GetPriorityGrouping+0x18>)
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	0a1b      	lsrs	r3, r3, #8
 8000f5e:	f003 0307 	and.w	r3, r3, #7
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bc80      	pop	{r7}
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	e000ed00 	.word	0xe000ed00

08000f70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	db0b      	blt.n	8000f9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f82:	79fb      	ldrb	r3, [r7, #7]
 8000f84:	f003 021f 	and.w	r2, r3, #31
 8000f88:	4906      	ldr	r1, [pc, #24]	; (8000fa4 <__NVIC_EnableIRQ+0x34>)
 8000f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8e:	095b      	lsrs	r3, r3, #5
 8000f90:	2001      	movs	r0, #1
 8000f92:	fa00 f202 	lsl.w	r2, r0, r2
 8000f96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f9a:	bf00      	nop
 8000f9c:	370c      	adds	r7, #12
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bc80      	pop	{r7}
 8000fa2:	4770      	bx	lr
 8000fa4:	e000e100 	.word	0xe000e100

08000fa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	6039      	str	r1, [r7, #0]
 8000fb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	db0a      	blt.n	8000fd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	b2da      	uxtb	r2, r3
 8000fc0:	490c      	ldr	r1, [pc, #48]	; (8000ff4 <__NVIC_SetPriority+0x4c>)
 8000fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc6:	0112      	lsls	r2, r2, #4
 8000fc8:	b2d2      	uxtb	r2, r2
 8000fca:	440b      	add	r3, r1
 8000fcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fd0:	e00a      	b.n	8000fe8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	b2da      	uxtb	r2, r3
 8000fd6:	4908      	ldr	r1, [pc, #32]	; (8000ff8 <__NVIC_SetPriority+0x50>)
 8000fd8:	79fb      	ldrb	r3, [r7, #7]
 8000fda:	f003 030f 	and.w	r3, r3, #15
 8000fde:	3b04      	subs	r3, #4
 8000fe0:	0112      	lsls	r2, r2, #4
 8000fe2:	b2d2      	uxtb	r2, r2
 8000fe4:	440b      	add	r3, r1
 8000fe6:	761a      	strb	r2, [r3, #24]
}
 8000fe8:	bf00      	nop
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bc80      	pop	{r7}
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	e000e100 	.word	0xe000e100
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b089      	sub	sp, #36	; 0x24
 8001000:	af00      	add	r7, sp, #0
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	f003 0307 	and.w	r3, r3, #7
 800100e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	f1c3 0307 	rsb	r3, r3, #7
 8001016:	2b04      	cmp	r3, #4
 8001018:	bf28      	it	cs
 800101a:	2304      	movcs	r3, #4
 800101c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	3304      	adds	r3, #4
 8001022:	2b06      	cmp	r3, #6
 8001024:	d902      	bls.n	800102c <NVIC_EncodePriority+0x30>
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	3b03      	subs	r3, #3
 800102a:	e000      	b.n	800102e <NVIC_EncodePriority+0x32>
 800102c:	2300      	movs	r3, #0
 800102e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001030:	f04f 32ff 	mov.w	r2, #4294967295
 8001034:	69bb      	ldr	r3, [r7, #24]
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	43da      	mvns	r2, r3
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	401a      	ands	r2, r3
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001044:	f04f 31ff 	mov.w	r1, #4294967295
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	fa01 f303 	lsl.w	r3, r1, r3
 800104e:	43d9      	mvns	r1, r3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001054:	4313      	orrs	r3, r2
         );
}
 8001056:	4618      	mov	r0, r3
 8001058:	3724      	adds	r7, #36	; 0x24
 800105a:	46bd      	mov	sp, r7
 800105c:	bc80      	pop	{r7}
 800105e:	4770      	bx	lr

08001060 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	3b01      	subs	r3, #1
 800106c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001070:	d301      	bcc.n	8001076 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001072:	2301      	movs	r3, #1
 8001074:	e00f      	b.n	8001096 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001076:	4a0a      	ldr	r2, [pc, #40]	; (80010a0 <SysTick_Config+0x40>)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	3b01      	subs	r3, #1
 800107c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800107e:	210f      	movs	r1, #15
 8001080:	f04f 30ff 	mov.w	r0, #4294967295
 8001084:	f7ff ff90 	bl	8000fa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001088:	4b05      	ldr	r3, [pc, #20]	; (80010a0 <SysTick_Config+0x40>)
 800108a:	2200      	movs	r2, #0
 800108c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800108e:	4b04      	ldr	r3, [pc, #16]	; (80010a0 <SysTick_Config+0x40>)
 8001090:	2207      	movs	r2, #7
 8001092:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001094:	2300      	movs	r3, #0
}
 8001096:	4618      	mov	r0, r3
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	e000e010 	.word	0xe000e010

080010a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	f7ff ff2d 	bl	8000f0c <__NVIC_SetPriorityGrouping>
}
 80010b2:	bf00      	nop
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}

080010ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b086      	sub	sp, #24
 80010be:	af00      	add	r7, sp, #0
 80010c0:	4603      	mov	r3, r0
 80010c2:	60b9      	str	r1, [r7, #8]
 80010c4:	607a      	str	r2, [r7, #4]
 80010c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010c8:	2300      	movs	r3, #0
 80010ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010cc:	f7ff ff42 	bl	8000f54 <__NVIC_GetPriorityGrouping>
 80010d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	68b9      	ldr	r1, [r7, #8]
 80010d6:	6978      	ldr	r0, [r7, #20]
 80010d8:	f7ff ff90 	bl	8000ffc <NVIC_EncodePriority>
 80010dc:	4602      	mov	r2, r0
 80010de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010e2:	4611      	mov	r1, r2
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff ff5f 	bl	8000fa8 <__NVIC_SetPriority>
}
 80010ea:	bf00      	nop
 80010ec:	3718      	adds	r7, #24
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b082      	sub	sp, #8
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	4603      	mov	r3, r0
 80010fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff ff35 	bl	8000f70 <__NVIC_EnableIRQ>
}
 8001106:	bf00      	nop
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	b082      	sub	sp, #8
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f7ff ffa2 	bl	8001060 <SysTick_Config>
 800111c:	4603      	mov	r3, r0
}
 800111e:	4618      	mov	r0, r3
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
	...

08001128 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001128:	b480      	push	{r7}
 800112a:	b08b      	sub	sp, #44	; 0x2c
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001132:	2300      	movs	r3, #0
 8001134:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001136:	2300      	movs	r3, #0
 8001138:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800113a:	e161      	b.n	8001400 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800113c:	2201      	movs	r2, #1
 800113e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	69fa      	ldr	r2, [r7, #28]
 800114c:	4013      	ands	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	429a      	cmp	r2, r3
 8001156:	f040 8150 	bne.w	80013fa <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	4a97      	ldr	r2, [pc, #604]	; (80013bc <HAL_GPIO_Init+0x294>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d05e      	beq.n	8001222 <HAL_GPIO_Init+0xfa>
 8001164:	4a95      	ldr	r2, [pc, #596]	; (80013bc <HAL_GPIO_Init+0x294>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d875      	bhi.n	8001256 <HAL_GPIO_Init+0x12e>
 800116a:	4a95      	ldr	r2, [pc, #596]	; (80013c0 <HAL_GPIO_Init+0x298>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d058      	beq.n	8001222 <HAL_GPIO_Init+0xfa>
 8001170:	4a93      	ldr	r2, [pc, #588]	; (80013c0 <HAL_GPIO_Init+0x298>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d86f      	bhi.n	8001256 <HAL_GPIO_Init+0x12e>
 8001176:	4a93      	ldr	r2, [pc, #588]	; (80013c4 <HAL_GPIO_Init+0x29c>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d052      	beq.n	8001222 <HAL_GPIO_Init+0xfa>
 800117c:	4a91      	ldr	r2, [pc, #580]	; (80013c4 <HAL_GPIO_Init+0x29c>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d869      	bhi.n	8001256 <HAL_GPIO_Init+0x12e>
 8001182:	4a91      	ldr	r2, [pc, #580]	; (80013c8 <HAL_GPIO_Init+0x2a0>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d04c      	beq.n	8001222 <HAL_GPIO_Init+0xfa>
 8001188:	4a8f      	ldr	r2, [pc, #572]	; (80013c8 <HAL_GPIO_Init+0x2a0>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d863      	bhi.n	8001256 <HAL_GPIO_Init+0x12e>
 800118e:	4a8f      	ldr	r2, [pc, #572]	; (80013cc <HAL_GPIO_Init+0x2a4>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d046      	beq.n	8001222 <HAL_GPIO_Init+0xfa>
 8001194:	4a8d      	ldr	r2, [pc, #564]	; (80013cc <HAL_GPIO_Init+0x2a4>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d85d      	bhi.n	8001256 <HAL_GPIO_Init+0x12e>
 800119a:	2b12      	cmp	r3, #18
 800119c:	d82a      	bhi.n	80011f4 <HAL_GPIO_Init+0xcc>
 800119e:	2b12      	cmp	r3, #18
 80011a0:	d859      	bhi.n	8001256 <HAL_GPIO_Init+0x12e>
 80011a2:	a201      	add	r2, pc, #4	; (adr r2, 80011a8 <HAL_GPIO_Init+0x80>)
 80011a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011a8:	08001223 	.word	0x08001223
 80011ac:	080011fd 	.word	0x080011fd
 80011b0:	0800120f 	.word	0x0800120f
 80011b4:	08001251 	.word	0x08001251
 80011b8:	08001257 	.word	0x08001257
 80011bc:	08001257 	.word	0x08001257
 80011c0:	08001257 	.word	0x08001257
 80011c4:	08001257 	.word	0x08001257
 80011c8:	08001257 	.word	0x08001257
 80011cc:	08001257 	.word	0x08001257
 80011d0:	08001257 	.word	0x08001257
 80011d4:	08001257 	.word	0x08001257
 80011d8:	08001257 	.word	0x08001257
 80011dc:	08001257 	.word	0x08001257
 80011e0:	08001257 	.word	0x08001257
 80011e4:	08001257 	.word	0x08001257
 80011e8:	08001257 	.word	0x08001257
 80011ec:	08001205 	.word	0x08001205
 80011f0:	08001219 	.word	0x08001219
 80011f4:	4a76      	ldr	r2, [pc, #472]	; (80013d0 <HAL_GPIO_Init+0x2a8>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d013      	beq.n	8001222 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80011fa:	e02c      	b.n	8001256 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	623b      	str	r3, [r7, #32]
          break;
 8001202:	e029      	b.n	8001258 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	3304      	adds	r3, #4
 800120a:	623b      	str	r3, [r7, #32]
          break;
 800120c:	e024      	b.n	8001258 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	68db      	ldr	r3, [r3, #12]
 8001212:	3308      	adds	r3, #8
 8001214:	623b      	str	r3, [r7, #32]
          break;
 8001216:	e01f      	b.n	8001258 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	330c      	adds	r3, #12
 800121e:	623b      	str	r3, [r7, #32]
          break;
 8001220:	e01a      	b.n	8001258 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d102      	bne.n	8001230 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800122a:	2304      	movs	r3, #4
 800122c:	623b      	str	r3, [r7, #32]
          break;
 800122e:	e013      	b.n	8001258 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	2b01      	cmp	r3, #1
 8001236:	d105      	bne.n	8001244 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001238:	2308      	movs	r3, #8
 800123a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	69fa      	ldr	r2, [r7, #28]
 8001240:	611a      	str	r2, [r3, #16]
          break;
 8001242:	e009      	b.n	8001258 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001244:	2308      	movs	r3, #8
 8001246:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	69fa      	ldr	r2, [r7, #28]
 800124c:	615a      	str	r2, [r3, #20]
          break;
 800124e:	e003      	b.n	8001258 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001250:	2300      	movs	r3, #0
 8001252:	623b      	str	r3, [r7, #32]
          break;
 8001254:	e000      	b.n	8001258 <HAL_GPIO_Init+0x130>
          break;
 8001256:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	2bff      	cmp	r3, #255	; 0xff
 800125c:	d801      	bhi.n	8001262 <HAL_GPIO_Init+0x13a>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	e001      	b.n	8001266 <HAL_GPIO_Init+0x13e>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	3304      	adds	r3, #4
 8001266:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	2bff      	cmp	r3, #255	; 0xff
 800126c:	d802      	bhi.n	8001274 <HAL_GPIO_Init+0x14c>
 800126e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	e002      	b.n	800127a <HAL_GPIO_Init+0x152>
 8001274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001276:	3b08      	subs	r3, #8
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	210f      	movs	r1, #15
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	fa01 f303 	lsl.w	r3, r1, r3
 8001288:	43db      	mvns	r3, r3
 800128a:	401a      	ands	r2, r3
 800128c:	6a39      	ldr	r1, [r7, #32]
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	fa01 f303 	lsl.w	r3, r1, r3
 8001294:	431a      	orrs	r2, r3
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	f000 80a9 	beq.w	80013fa <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80012a8:	4b4a      	ldr	r3, [pc, #296]	; (80013d4 <HAL_GPIO_Init+0x2ac>)
 80012aa:	699b      	ldr	r3, [r3, #24]
 80012ac:	4a49      	ldr	r2, [pc, #292]	; (80013d4 <HAL_GPIO_Init+0x2ac>)
 80012ae:	f043 0301 	orr.w	r3, r3, #1
 80012b2:	6193      	str	r3, [r2, #24]
 80012b4:	4b47      	ldr	r3, [pc, #284]	; (80013d4 <HAL_GPIO_Init+0x2ac>)
 80012b6:	699b      	ldr	r3, [r3, #24]
 80012b8:	f003 0301 	and.w	r3, r3, #1
 80012bc:	60bb      	str	r3, [r7, #8]
 80012be:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80012c0:	4a45      	ldr	r2, [pc, #276]	; (80013d8 <HAL_GPIO_Init+0x2b0>)
 80012c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c4:	089b      	lsrs	r3, r3, #2
 80012c6:	3302      	adds	r3, #2
 80012c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012cc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80012ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d0:	f003 0303 	and.w	r3, r3, #3
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	220f      	movs	r2, #15
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	43db      	mvns	r3, r3
 80012de:	68fa      	ldr	r2, [r7, #12]
 80012e0:	4013      	ands	r3, r2
 80012e2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	4a3d      	ldr	r2, [pc, #244]	; (80013dc <HAL_GPIO_Init+0x2b4>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d00d      	beq.n	8001308 <HAL_GPIO_Init+0x1e0>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	4a3c      	ldr	r2, [pc, #240]	; (80013e0 <HAL_GPIO_Init+0x2b8>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d007      	beq.n	8001304 <HAL_GPIO_Init+0x1dc>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	4a3b      	ldr	r2, [pc, #236]	; (80013e4 <HAL_GPIO_Init+0x2bc>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d101      	bne.n	8001300 <HAL_GPIO_Init+0x1d8>
 80012fc:	2302      	movs	r3, #2
 80012fe:	e004      	b.n	800130a <HAL_GPIO_Init+0x1e2>
 8001300:	2303      	movs	r3, #3
 8001302:	e002      	b.n	800130a <HAL_GPIO_Init+0x1e2>
 8001304:	2301      	movs	r3, #1
 8001306:	e000      	b.n	800130a <HAL_GPIO_Init+0x1e2>
 8001308:	2300      	movs	r3, #0
 800130a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800130c:	f002 0203 	and.w	r2, r2, #3
 8001310:	0092      	lsls	r2, r2, #2
 8001312:	4093      	lsls	r3, r2
 8001314:	68fa      	ldr	r2, [r7, #12]
 8001316:	4313      	orrs	r3, r2
 8001318:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800131a:	492f      	ldr	r1, [pc, #188]	; (80013d8 <HAL_GPIO_Init+0x2b0>)
 800131c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131e:	089b      	lsrs	r3, r3, #2
 8001320:	3302      	adds	r3, #2
 8001322:	68fa      	ldr	r2, [r7, #12]
 8001324:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001330:	2b00      	cmp	r3, #0
 8001332:	d006      	beq.n	8001342 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001334:	4b2c      	ldr	r3, [pc, #176]	; (80013e8 <HAL_GPIO_Init+0x2c0>)
 8001336:	689a      	ldr	r2, [r3, #8]
 8001338:	492b      	ldr	r1, [pc, #172]	; (80013e8 <HAL_GPIO_Init+0x2c0>)
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	4313      	orrs	r3, r2
 800133e:	608b      	str	r3, [r1, #8]
 8001340:	e006      	b.n	8001350 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001342:	4b29      	ldr	r3, [pc, #164]	; (80013e8 <HAL_GPIO_Init+0x2c0>)
 8001344:	689a      	ldr	r2, [r3, #8]
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	43db      	mvns	r3, r3
 800134a:	4927      	ldr	r1, [pc, #156]	; (80013e8 <HAL_GPIO_Init+0x2c0>)
 800134c:	4013      	ands	r3, r2
 800134e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001358:	2b00      	cmp	r3, #0
 800135a:	d006      	beq.n	800136a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800135c:	4b22      	ldr	r3, [pc, #136]	; (80013e8 <HAL_GPIO_Init+0x2c0>)
 800135e:	68da      	ldr	r2, [r3, #12]
 8001360:	4921      	ldr	r1, [pc, #132]	; (80013e8 <HAL_GPIO_Init+0x2c0>)
 8001362:	69bb      	ldr	r3, [r7, #24]
 8001364:	4313      	orrs	r3, r2
 8001366:	60cb      	str	r3, [r1, #12]
 8001368:	e006      	b.n	8001378 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800136a:	4b1f      	ldr	r3, [pc, #124]	; (80013e8 <HAL_GPIO_Init+0x2c0>)
 800136c:	68da      	ldr	r2, [r3, #12]
 800136e:	69bb      	ldr	r3, [r7, #24]
 8001370:	43db      	mvns	r3, r3
 8001372:	491d      	ldr	r1, [pc, #116]	; (80013e8 <HAL_GPIO_Init+0x2c0>)
 8001374:	4013      	ands	r3, r2
 8001376:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001380:	2b00      	cmp	r3, #0
 8001382:	d006      	beq.n	8001392 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001384:	4b18      	ldr	r3, [pc, #96]	; (80013e8 <HAL_GPIO_Init+0x2c0>)
 8001386:	685a      	ldr	r2, [r3, #4]
 8001388:	4917      	ldr	r1, [pc, #92]	; (80013e8 <HAL_GPIO_Init+0x2c0>)
 800138a:	69bb      	ldr	r3, [r7, #24]
 800138c:	4313      	orrs	r3, r2
 800138e:	604b      	str	r3, [r1, #4]
 8001390:	e006      	b.n	80013a0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001392:	4b15      	ldr	r3, [pc, #84]	; (80013e8 <HAL_GPIO_Init+0x2c0>)
 8001394:	685a      	ldr	r2, [r3, #4]
 8001396:	69bb      	ldr	r3, [r7, #24]
 8001398:	43db      	mvns	r3, r3
 800139a:	4913      	ldr	r1, [pc, #76]	; (80013e8 <HAL_GPIO_Init+0x2c0>)
 800139c:	4013      	ands	r3, r2
 800139e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d01f      	beq.n	80013ec <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80013ac:	4b0e      	ldr	r3, [pc, #56]	; (80013e8 <HAL_GPIO_Init+0x2c0>)
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	490d      	ldr	r1, [pc, #52]	; (80013e8 <HAL_GPIO_Init+0x2c0>)
 80013b2:	69bb      	ldr	r3, [r7, #24]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	600b      	str	r3, [r1, #0]
 80013b8:	e01f      	b.n	80013fa <HAL_GPIO_Init+0x2d2>
 80013ba:	bf00      	nop
 80013bc:	10320000 	.word	0x10320000
 80013c0:	10310000 	.word	0x10310000
 80013c4:	10220000 	.word	0x10220000
 80013c8:	10210000 	.word	0x10210000
 80013cc:	10120000 	.word	0x10120000
 80013d0:	10110000 	.word	0x10110000
 80013d4:	40021000 	.word	0x40021000
 80013d8:	40010000 	.word	0x40010000
 80013dc:	40010800 	.word	0x40010800
 80013e0:	40010c00 	.word	0x40010c00
 80013e4:	40011000 	.word	0x40011000
 80013e8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80013ec:	4b0b      	ldr	r3, [pc, #44]	; (800141c <HAL_GPIO_Init+0x2f4>)
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	43db      	mvns	r3, r3
 80013f4:	4909      	ldr	r1, [pc, #36]	; (800141c <HAL_GPIO_Init+0x2f4>)
 80013f6:	4013      	ands	r3, r2
 80013f8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80013fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fc:	3301      	adds	r3, #1
 80013fe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001406:	fa22 f303 	lsr.w	r3, r2, r3
 800140a:	2b00      	cmp	r3, #0
 800140c:	f47f ae96 	bne.w	800113c <HAL_GPIO_Init+0x14>
  }
}
 8001410:	bf00      	nop
 8001412:	bf00      	nop
 8001414:	372c      	adds	r7, #44	; 0x2c
 8001416:	46bd      	mov	sp, r7
 8001418:	bc80      	pop	{r7}
 800141a:	4770      	bx	lr
 800141c:	40010400 	.word	0x40010400

08001420 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001420:	b480      	push	{r7}
 8001422:	b085      	sub	sp, #20
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	460b      	mov	r3, r1
 800142a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	689a      	ldr	r2, [r3, #8]
 8001430:	887b      	ldrh	r3, [r7, #2]
 8001432:	4013      	ands	r3, r2
 8001434:	2b00      	cmp	r3, #0
 8001436:	d002      	beq.n	800143e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001438:	2301      	movs	r3, #1
 800143a:	73fb      	strb	r3, [r7, #15]
 800143c:	e001      	b.n	8001442 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800143e:	2300      	movs	r3, #0
 8001440:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001442:	7bfb      	ldrb	r3, [r7, #15]
}
 8001444:	4618      	mov	r0, r3
 8001446:	3714      	adds	r7, #20
 8001448:	46bd      	mov	sp, r7
 800144a:	bc80      	pop	{r7}
 800144c:	4770      	bx	lr

0800144e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800144e:	b480      	push	{r7}
 8001450:	b083      	sub	sp, #12
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
 8001456:	460b      	mov	r3, r1
 8001458:	807b      	strh	r3, [r7, #2]
 800145a:	4613      	mov	r3, r2
 800145c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800145e:	787b      	ldrb	r3, [r7, #1]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d003      	beq.n	800146c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001464:	887a      	ldrh	r2, [r7, #2]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800146a:	e003      	b.n	8001474 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800146c:	887b      	ldrh	r3, [r7, #2]
 800146e:	041a      	lsls	r2, r3, #16
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	611a      	str	r2, [r3, #16]
}
 8001474:	bf00      	nop
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	bc80      	pop	{r7}
 800147c:	4770      	bx	lr

0800147e <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800147e:	b580      	push	{r7, lr}
 8001480:	b084      	sub	sp, #16
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d101      	bne.n	8001490 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	e034      	b.n	80014fa <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8001498:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f245 5255 	movw	r2, #21845	; 0x5555
 80014a2:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	687a      	ldr	r2, [r7, #4]
 80014aa:	6852      	ldr	r2, [r2, #4]
 80014ac:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	6892      	ldr	r2, [r2, #8]
 80014b6:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80014b8:	f7ff fd1e 	bl	8000ef8 <HAL_GetTick>
 80014bc:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80014be:	e00f      	b.n	80014e0 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80014c0:	f7ff fd1a 	bl	8000ef8 <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	2b27      	cmp	r3, #39	; 0x27
 80014cc:	d908      	bls.n	80014e0 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	f003 0303 	and.w	r3, r3, #3
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 80014dc:	2303      	movs	r3, #3
 80014de:	e00c      	b.n	80014fa <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	68db      	ldr	r3, [r3, #12]
 80014e6:	f003 0303 	and.w	r3, r3, #3
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d1e8      	bne.n	80014c0 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80014f6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80014f8:	2300      	movs	r3, #0
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3710      	adds	r7, #16
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}

08001502 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8001502:	b480      	push	{r7}
 8001504:	b083      	sub	sp, #12
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8001512:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001514:	2300      	movs	r3, #0
}
 8001516:	4618      	mov	r0, r3
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	bc80      	pop	{r7}
 800151e:	4770      	bx	lr

08001520 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b086      	sub	sp, #24
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d101      	bne.n	8001532 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e272      	b.n	8001a18 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0301 	and.w	r3, r3, #1
 800153a:	2b00      	cmp	r3, #0
 800153c:	f000 8087 	beq.w	800164e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001540:	4b92      	ldr	r3, [pc, #584]	; (800178c <HAL_RCC_OscConfig+0x26c>)
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f003 030c 	and.w	r3, r3, #12
 8001548:	2b04      	cmp	r3, #4
 800154a:	d00c      	beq.n	8001566 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800154c:	4b8f      	ldr	r3, [pc, #572]	; (800178c <HAL_RCC_OscConfig+0x26c>)
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f003 030c 	and.w	r3, r3, #12
 8001554:	2b08      	cmp	r3, #8
 8001556:	d112      	bne.n	800157e <HAL_RCC_OscConfig+0x5e>
 8001558:	4b8c      	ldr	r3, [pc, #560]	; (800178c <HAL_RCC_OscConfig+0x26c>)
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001560:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001564:	d10b      	bne.n	800157e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001566:	4b89      	ldr	r3, [pc, #548]	; (800178c <HAL_RCC_OscConfig+0x26c>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d06c      	beq.n	800164c <HAL_RCC_OscConfig+0x12c>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d168      	bne.n	800164c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e24c      	b.n	8001a18 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001586:	d106      	bne.n	8001596 <HAL_RCC_OscConfig+0x76>
 8001588:	4b80      	ldr	r3, [pc, #512]	; (800178c <HAL_RCC_OscConfig+0x26c>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a7f      	ldr	r2, [pc, #508]	; (800178c <HAL_RCC_OscConfig+0x26c>)
 800158e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001592:	6013      	str	r3, [r2, #0]
 8001594:	e02e      	b.n	80015f4 <HAL_RCC_OscConfig+0xd4>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d10c      	bne.n	80015b8 <HAL_RCC_OscConfig+0x98>
 800159e:	4b7b      	ldr	r3, [pc, #492]	; (800178c <HAL_RCC_OscConfig+0x26c>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a7a      	ldr	r2, [pc, #488]	; (800178c <HAL_RCC_OscConfig+0x26c>)
 80015a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015a8:	6013      	str	r3, [r2, #0]
 80015aa:	4b78      	ldr	r3, [pc, #480]	; (800178c <HAL_RCC_OscConfig+0x26c>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a77      	ldr	r2, [pc, #476]	; (800178c <HAL_RCC_OscConfig+0x26c>)
 80015b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015b4:	6013      	str	r3, [r2, #0]
 80015b6:	e01d      	b.n	80015f4 <HAL_RCC_OscConfig+0xd4>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015c0:	d10c      	bne.n	80015dc <HAL_RCC_OscConfig+0xbc>
 80015c2:	4b72      	ldr	r3, [pc, #456]	; (800178c <HAL_RCC_OscConfig+0x26c>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a71      	ldr	r2, [pc, #452]	; (800178c <HAL_RCC_OscConfig+0x26c>)
 80015c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015cc:	6013      	str	r3, [r2, #0]
 80015ce:	4b6f      	ldr	r3, [pc, #444]	; (800178c <HAL_RCC_OscConfig+0x26c>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a6e      	ldr	r2, [pc, #440]	; (800178c <HAL_RCC_OscConfig+0x26c>)
 80015d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015d8:	6013      	str	r3, [r2, #0]
 80015da:	e00b      	b.n	80015f4 <HAL_RCC_OscConfig+0xd4>
 80015dc:	4b6b      	ldr	r3, [pc, #428]	; (800178c <HAL_RCC_OscConfig+0x26c>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a6a      	ldr	r2, [pc, #424]	; (800178c <HAL_RCC_OscConfig+0x26c>)
 80015e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015e6:	6013      	str	r3, [r2, #0]
 80015e8:	4b68      	ldr	r3, [pc, #416]	; (800178c <HAL_RCC_OscConfig+0x26c>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a67      	ldr	r2, [pc, #412]	; (800178c <HAL_RCC_OscConfig+0x26c>)
 80015ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015f2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d013      	beq.n	8001624 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015fc:	f7ff fc7c 	bl	8000ef8 <HAL_GetTick>
 8001600:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001602:	e008      	b.n	8001616 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001604:	f7ff fc78 	bl	8000ef8 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	2b64      	cmp	r3, #100	; 0x64
 8001610:	d901      	bls.n	8001616 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	e200      	b.n	8001a18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001616:	4b5d      	ldr	r3, [pc, #372]	; (800178c <HAL_RCC_OscConfig+0x26c>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d0f0      	beq.n	8001604 <HAL_RCC_OscConfig+0xe4>
 8001622:	e014      	b.n	800164e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001624:	f7ff fc68 	bl	8000ef8 <HAL_GetTick>
 8001628:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800162a:	e008      	b.n	800163e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800162c:	f7ff fc64 	bl	8000ef8 <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	2b64      	cmp	r3, #100	; 0x64
 8001638:	d901      	bls.n	800163e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e1ec      	b.n	8001a18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800163e:	4b53      	ldr	r3, [pc, #332]	; (800178c <HAL_RCC_OscConfig+0x26c>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d1f0      	bne.n	800162c <HAL_RCC_OscConfig+0x10c>
 800164a:	e000      	b.n	800164e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800164c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0302 	and.w	r3, r3, #2
 8001656:	2b00      	cmp	r3, #0
 8001658:	d063      	beq.n	8001722 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800165a:	4b4c      	ldr	r3, [pc, #304]	; (800178c <HAL_RCC_OscConfig+0x26c>)
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f003 030c 	and.w	r3, r3, #12
 8001662:	2b00      	cmp	r3, #0
 8001664:	d00b      	beq.n	800167e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001666:	4b49      	ldr	r3, [pc, #292]	; (800178c <HAL_RCC_OscConfig+0x26c>)
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f003 030c 	and.w	r3, r3, #12
 800166e:	2b08      	cmp	r3, #8
 8001670:	d11c      	bne.n	80016ac <HAL_RCC_OscConfig+0x18c>
 8001672:	4b46      	ldr	r3, [pc, #280]	; (800178c <HAL_RCC_OscConfig+0x26c>)
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d116      	bne.n	80016ac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800167e:	4b43      	ldr	r3, [pc, #268]	; (800178c <HAL_RCC_OscConfig+0x26c>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	2b00      	cmp	r3, #0
 8001688:	d005      	beq.n	8001696 <HAL_RCC_OscConfig+0x176>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	691b      	ldr	r3, [r3, #16]
 800168e:	2b01      	cmp	r3, #1
 8001690:	d001      	beq.n	8001696 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e1c0      	b.n	8001a18 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001696:	4b3d      	ldr	r3, [pc, #244]	; (800178c <HAL_RCC_OscConfig+0x26c>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	695b      	ldr	r3, [r3, #20]
 80016a2:	00db      	lsls	r3, r3, #3
 80016a4:	4939      	ldr	r1, [pc, #228]	; (800178c <HAL_RCC_OscConfig+0x26c>)
 80016a6:	4313      	orrs	r3, r2
 80016a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016aa:	e03a      	b.n	8001722 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	691b      	ldr	r3, [r3, #16]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d020      	beq.n	80016f6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016b4:	4b36      	ldr	r3, [pc, #216]	; (8001790 <HAL_RCC_OscConfig+0x270>)
 80016b6:	2201      	movs	r2, #1
 80016b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ba:	f7ff fc1d 	bl	8000ef8 <HAL_GetTick>
 80016be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016c0:	e008      	b.n	80016d4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016c2:	f7ff fc19 	bl	8000ef8 <HAL_GetTick>
 80016c6:	4602      	mov	r2, r0
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d901      	bls.n	80016d4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80016d0:	2303      	movs	r3, #3
 80016d2:	e1a1      	b.n	8001a18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016d4:	4b2d      	ldr	r3, [pc, #180]	; (800178c <HAL_RCC_OscConfig+0x26c>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 0302 	and.w	r3, r3, #2
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d0f0      	beq.n	80016c2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016e0:	4b2a      	ldr	r3, [pc, #168]	; (800178c <HAL_RCC_OscConfig+0x26c>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	695b      	ldr	r3, [r3, #20]
 80016ec:	00db      	lsls	r3, r3, #3
 80016ee:	4927      	ldr	r1, [pc, #156]	; (800178c <HAL_RCC_OscConfig+0x26c>)
 80016f0:	4313      	orrs	r3, r2
 80016f2:	600b      	str	r3, [r1, #0]
 80016f4:	e015      	b.n	8001722 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016f6:	4b26      	ldr	r3, [pc, #152]	; (8001790 <HAL_RCC_OscConfig+0x270>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016fc:	f7ff fbfc 	bl	8000ef8 <HAL_GetTick>
 8001700:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001702:	e008      	b.n	8001716 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001704:	f7ff fbf8 	bl	8000ef8 <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	2b02      	cmp	r3, #2
 8001710:	d901      	bls.n	8001716 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e180      	b.n	8001a18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001716:	4b1d      	ldr	r3, [pc, #116]	; (800178c <HAL_RCC_OscConfig+0x26c>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0302 	and.w	r3, r3, #2
 800171e:	2b00      	cmp	r3, #0
 8001720:	d1f0      	bne.n	8001704 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0308 	and.w	r3, r3, #8
 800172a:	2b00      	cmp	r3, #0
 800172c:	d03a      	beq.n	80017a4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	699b      	ldr	r3, [r3, #24]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d019      	beq.n	800176a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001736:	4b17      	ldr	r3, [pc, #92]	; (8001794 <HAL_RCC_OscConfig+0x274>)
 8001738:	2201      	movs	r2, #1
 800173a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800173c:	f7ff fbdc 	bl	8000ef8 <HAL_GetTick>
 8001740:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001742:	e008      	b.n	8001756 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001744:	f7ff fbd8 	bl	8000ef8 <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	2b02      	cmp	r3, #2
 8001750:	d901      	bls.n	8001756 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e160      	b.n	8001a18 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001756:	4b0d      	ldr	r3, [pc, #52]	; (800178c <HAL_RCC_OscConfig+0x26c>)
 8001758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175a:	f003 0302 	and.w	r3, r3, #2
 800175e:	2b00      	cmp	r3, #0
 8001760:	d0f0      	beq.n	8001744 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001762:	2001      	movs	r0, #1
 8001764:	f000 fa9c 	bl	8001ca0 <RCC_Delay>
 8001768:	e01c      	b.n	80017a4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800176a:	4b0a      	ldr	r3, [pc, #40]	; (8001794 <HAL_RCC_OscConfig+0x274>)
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001770:	f7ff fbc2 	bl	8000ef8 <HAL_GetTick>
 8001774:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001776:	e00f      	b.n	8001798 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001778:	f7ff fbbe 	bl	8000ef8 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	2b02      	cmp	r3, #2
 8001784:	d908      	bls.n	8001798 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e146      	b.n	8001a18 <HAL_RCC_OscConfig+0x4f8>
 800178a:	bf00      	nop
 800178c:	40021000 	.word	0x40021000
 8001790:	42420000 	.word	0x42420000
 8001794:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001798:	4b92      	ldr	r3, [pc, #584]	; (80019e4 <HAL_RCC_OscConfig+0x4c4>)
 800179a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800179c:	f003 0302 	and.w	r3, r3, #2
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d1e9      	bne.n	8001778 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0304 	and.w	r3, r3, #4
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	f000 80a6 	beq.w	80018fe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017b2:	2300      	movs	r3, #0
 80017b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017b6:	4b8b      	ldr	r3, [pc, #556]	; (80019e4 <HAL_RCC_OscConfig+0x4c4>)
 80017b8:	69db      	ldr	r3, [r3, #28]
 80017ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d10d      	bne.n	80017de <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017c2:	4b88      	ldr	r3, [pc, #544]	; (80019e4 <HAL_RCC_OscConfig+0x4c4>)
 80017c4:	69db      	ldr	r3, [r3, #28]
 80017c6:	4a87      	ldr	r2, [pc, #540]	; (80019e4 <HAL_RCC_OscConfig+0x4c4>)
 80017c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017cc:	61d3      	str	r3, [r2, #28]
 80017ce:	4b85      	ldr	r3, [pc, #532]	; (80019e4 <HAL_RCC_OscConfig+0x4c4>)
 80017d0:	69db      	ldr	r3, [r3, #28]
 80017d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017d6:	60bb      	str	r3, [r7, #8]
 80017d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017da:	2301      	movs	r3, #1
 80017dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017de:	4b82      	ldr	r3, [pc, #520]	; (80019e8 <HAL_RCC_OscConfig+0x4c8>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d118      	bne.n	800181c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017ea:	4b7f      	ldr	r3, [pc, #508]	; (80019e8 <HAL_RCC_OscConfig+0x4c8>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a7e      	ldr	r2, [pc, #504]	; (80019e8 <HAL_RCC_OscConfig+0x4c8>)
 80017f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017f6:	f7ff fb7f 	bl	8000ef8 <HAL_GetTick>
 80017fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017fc:	e008      	b.n	8001810 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017fe:	f7ff fb7b 	bl	8000ef8 <HAL_GetTick>
 8001802:	4602      	mov	r2, r0
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	2b64      	cmp	r3, #100	; 0x64
 800180a:	d901      	bls.n	8001810 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800180c:	2303      	movs	r3, #3
 800180e:	e103      	b.n	8001a18 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001810:	4b75      	ldr	r3, [pc, #468]	; (80019e8 <HAL_RCC_OscConfig+0x4c8>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001818:	2b00      	cmp	r3, #0
 800181a:	d0f0      	beq.n	80017fe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	2b01      	cmp	r3, #1
 8001822:	d106      	bne.n	8001832 <HAL_RCC_OscConfig+0x312>
 8001824:	4b6f      	ldr	r3, [pc, #444]	; (80019e4 <HAL_RCC_OscConfig+0x4c4>)
 8001826:	6a1b      	ldr	r3, [r3, #32]
 8001828:	4a6e      	ldr	r2, [pc, #440]	; (80019e4 <HAL_RCC_OscConfig+0x4c4>)
 800182a:	f043 0301 	orr.w	r3, r3, #1
 800182e:	6213      	str	r3, [r2, #32]
 8001830:	e02d      	b.n	800188e <HAL_RCC_OscConfig+0x36e>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	68db      	ldr	r3, [r3, #12]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d10c      	bne.n	8001854 <HAL_RCC_OscConfig+0x334>
 800183a:	4b6a      	ldr	r3, [pc, #424]	; (80019e4 <HAL_RCC_OscConfig+0x4c4>)
 800183c:	6a1b      	ldr	r3, [r3, #32]
 800183e:	4a69      	ldr	r2, [pc, #420]	; (80019e4 <HAL_RCC_OscConfig+0x4c4>)
 8001840:	f023 0301 	bic.w	r3, r3, #1
 8001844:	6213      	str	r3, [r2, #32]
 8001846:	4b67      	ldr	r3, [pc, #412]	; (80019e4 <HAL_RCC_OscConfig+0x4c4>)
 8001848:	6a1b      	ldr	r3, [r3, #32]
 800184a:	4a66      	ldr	r2, [pc, #408]	; (80019e4 <HAL_RCC_OscConfig+0x4c4>)
 800184c:	f023 0304 	bic.w	r3, r3, #4
 8001850:	6213      	str	r3, [r2, #32]
 8001852:	e01c      	b.n	800188e <HAL_RCC_OscConfig+0x36e>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	2b05      	cmp	r3, #5
 800185a:	d10c      	bne.n	8001876 <HAL_RCC_OscConfig+0x356>
 800185c:	4b61      	ldr	r3, [pc, #388]	; (80019e4 <HAL_RCC_OscConfig+0x4c4>)
 800185e:	6a1b      	ldr	r3, [r3, #32]
 8001860:	4a60      	ldr	r2, [pc, #384]	; (80019e4 <HAL_RCC_OscConfig+0x4c4>)
 8001862:	f043 0304 	orr.w	r3, r3, #4
 8001866:	6213      	str	r3, [r2, #32]
 8001868:	4b5e      	ldr	r3, [pc, #376]	; (80019e4 <HAL_RCC_OscConfig+0x4c4>)
 800186a:	6a1b      	ldr	r3, [r3, #32]
 800186c:	4a5d      	ldr	r2, [pc, #372]	; (80019e4 <HAL_RCC_OscConfig+0x4c4>)
 800186e:	f043 0301 	orr.w	r3, r3, #1
 8001872:	6213      	str	r3, [r2, #32]
 8001874:	e00b      	b.n	800188e <HAL_RCC_OscConfig+0x36e>
 8001876:	4b5b      	ldr	r3, [pc, #364]	; (80019e4 <HAL_RCC_OscConfig+0x4c4>)
 8001878:	6a1b      	ldr	r3, [r3, #32]
 800187a:	4a5a      	ldr	r2, [pc, #360]	; (80019e4 <HAL_RCC_OscConfig+0x4c4>)
 800187c:	f023 0301 	bic.w	r3, r3, #1
 8001880:	6213      	str	r3, [r2, #32]
 8001882:	4b58      	ldr	r3, [pc, #352]	; (80019e4 <HAL_RCC_OscConfig+0x4c4>)
 8001884:	6a1b      	ldr	r3, [r3, #32]
 8001886:	4a57      	ldr	r2, [pc, #348]	; (80019e4 <HAL_RCC_OscConfig+0x4c4>)
 8001888:	f023 0304 	bic.w	r3, r3, #4
 800188c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	68db      	ldr	r3, [r3, #12]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d015      	beq.n	80018c2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001896:	f7ff fb2f 	bl	8000ef8 <HAL_GetTick>
 800189a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800189c:	e00a      	b.n	80018b4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800189e:	f7ff fb2b 	bl	8000ef8 <HAL_GetTick>
 80018a2:	4602      	mov	r2, r0
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d901      	bls.n	80018b4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80018b0:	2303      	movs	r3, #3
 80018b2:	e0b1      	b.n	8001a18 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018b4:	4b4b      	ldr	r3, [pc, #300]	; (80019e4 <HAL_RCC_OscConfig+0x4c4>)
 80018b6:	6a1b      	ldr	r3, [r3, #32]
 80018b8:	f003 0302 	and.w	r3, r3, #2
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d0ee      	beq.n	800189e <HAL_RCC_OscConfig+0x37e>
 80018c0:	e014      	b.n	80018ec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018c2:	f7ff fb19 	bl	8000ef8 <HAL_GetTick>
 80018c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018c8:	e00a      	b.n	80018e0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018ca:	f7ff fb15 	bl	8000ef8 <HAL_GetTick>
 80018ce:	4602      	mov	r2, r0
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80018d8:	4293      	cmp	r3, r2
 80018da:	d901      	bls.n	80018e0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80018dc:	2303      	movs	r3, #3
 80018de:	e09b      	b.n	8001a18 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018e0:	4b40      	ldr	r3, [pc, #256]	; (80019e4 <HAL_RCC_OscConfig+0x4c4>)
 80018e2:	6a1b      	ldr	r3, [r3, #32]
 80018e4:	f003 0302 	and.w	r3, r3, #2
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d1ee      	bne.n	80018ca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80018ec:	7dfb      	ldrb	r3, [r7, #23]
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d105      	bne.n	80018fe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018f2:	4b3c      	ldr	r3, [pc, #240]	; (80019e4 <HAL_RCC_OscConfig+0x4c4>)
 80018f4:	69db      	ldr	r3, [r3, #28]
 80018f6:	4a3b      	ldr	r2, [pc, #236]	; (80019e4 <HAL_RCC_OscConfig+0x4c4>)
 80018f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018fc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	69db      	ldr	r3, [r3, #28]
 8001902:	2b00      	cmp	r3, #0
 8001904:	f000 8087 	beq.w	8001a16 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001908:	4b36      	ldr	r3, [pc, #216]	; (80019e4 <HAL_RCC_OscConfig+0x4c4>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f003 030c 	and.w	r3, r3, #12
 8001910:	2b08      	cmp	r3, #8
 8001912:	d061      	beq.n	80019d8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	69db      	ldr	r3, [r3, #28]
 8001918:	2b02      	cmp	r3, #2
 800191a:	d146      	bne.n	80019aa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800191c:	4b33      	ldr	r3, [pc, #204]	; (80019ec <HAL_RCC_OscConfig+0x4cc>)
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001922:	f7ff fae9 	bl	8000ef8 <HAL_GetTick>
 8001926:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001928:	e008      	b.n	800193c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800192a:	f7ff fae5 	bl	8000ef8 <HAL_GetTick>
 800192e:	4602      	mov	r2, r0
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	2b02      	cmp	r3, #2
 8001936:	d901      	bls.n	800193c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001938:	2303      	movs	r3, #3
 800193a:	e06d      	b.n	8001a18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800193c:	4b29      	ldr	r3, [pc, #164]	; (80019e4 <HAL_RCC_OscConfig+0x4c4>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001944:	2b00      	cmp	r3, #0
 8001946:	d1f0      	bne.n	800192a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6a1b      	ldr	r3, [r3, #32]
 800194c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001950:	d108      	bne.n	8001964 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001952:	4b24      	ldr	r3, [pc, #144]	; (80019e4 <HAL_RCC_OscConfig+0x4c4>)
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	4921      	ldr	r1, [pc, #132]	; (80019e4 <HAL_RCC_OscConfig+0x4c4>)
 8001960:	4313      	orrs	r3, r2
 8001962:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001964:	4b1f      	ldr	r3, [pc, #124]	; (80019e4 <HAL_RCC_OscConfig+0x4c4>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6a19      	ldr	r1, [r3, #32]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001974:	430b      	orrs	r3, r1
 8001976:	491b      	ldr	r1, [pc, #108]	; (80019e4 <HAL_RCC_OscConfig+0x4c4>)
 8001978:	4313      	orrs	r3, r2
 800197a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800197c:	4b1b      	ldr	r3, [pc, #108]	; (80019ec <HAL_RCC_OscConfig+0x4cc>)
 800197e:	2201      	movs	r2, #1
 8001980:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001982:	f7ff fab9 	bl	8000ef8 <HAL_GetTick>
 8001986:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001988:	e008      	b.n	800199c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800198a:	f7ff fab5 	bl	8000ef8 <HAL_GetTick>
 800198e:	4602      	mov	r2, r0
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	2b02      	cmp	r3, #2
 8001996:	d901      	bls.n	800199c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001998:	2303      	movs	r3, #3
 800199a:	e03d      	b.n	8001a18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800199c:	4b11      	ldr	r3, [pc, #68]	; (80019e4 <HAL_RCC_OscConfig+0x4c4>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d0f0      	beq.n	800198a <HAL_RCC_OscConfig+0x46a>
 80019a8:	e035      	b.n	8001a16 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019aa:	4b10      	ldr	r3, [pc, #64]	; (80019ec <HAL_RCC_OscConfig+0x4cc>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b0:	f7ff faa2 	bl	8000ef8 <HAL_GetTick>
 80019b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019b6:	e008      	b.n	80019ca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019b8:	f7ff fa9e 	bl	8000ef8 <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d901      	bls.n	80019ca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e026      	b.n	8001a18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019ca:	4b06      	ldr	r3, [pc, #24]	; (80019e4 <HAL_RCC_OscConfig+0x4c4>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d1f0      	bne.n	80019b8 <HAL_RCC_OscConfig+0x498>
 80019d6:	e01e      	b.n	8001a16 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	69db      	ldr	r3, [r3, #28]
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d107      	bne.n	80019f0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e019      	b.n	8001a18 <HAL_RCC_OscConfig+0x4f8>
 80019e4:	40021000 	.word	0x40021000
 80019e8:	40007000 	.word	0x40007000
 80019ec:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80019f0:	4b0b      	ldr	r3, [pc, #44]	; (8001a20 <HAL_RCC_OscConfig+0x500>)
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6a1b      	ldr	r3, [r3, #32]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d106      	bne.n	8001a12 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d001      	beq.n	8001a16 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e000      	b.n	8001a18 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001a16:	2300      	movs	r3, #0
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3718      	adds	r7, #24
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	40021000 	.word	0x40021000

08001a24 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d101      	bne.n	8001a38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e0d0      	b.n	8001bda <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a38:	4b6a      	ldr	r3, [pc, #424]	; (8001be4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0307 	and.w	r3, r3, #7
 8001a40:	683a      	ldr	r2, [r7, #0]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d910      	bls.n	8001a68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a46:	4b67      	ldr	r3, [pc, #412]	; (8001be4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f023 0207 	bic.w	r2, r3, #7
 8001a4e:	4965      	ldr	r1, [pc, #404]	; (8001be4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a56:	4b63      	ldr	r3, [pc, #396]	; (8001be4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0307 	and.w	r3, r3, #7
 8001a5e:	683a      	ldr	r2, [r7, #0]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d001      	beq.n	8001a68 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e0b8      	b.n	8001bda <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0302 	and.w	r3, r3, #2
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d020      	beq.n	8001ab6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0304 	and.w	r3, r3, #4
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d005      	beq.n	8001a8c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a80:	4b59      	ldr	r3, [pc, #356]	; (8001be8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	4a58      	ldr	r2, [pc, #352]	; (8001be8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a86:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a8a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0308 	and.w	r3, r3, #8
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d005      	beq.n	8001aa4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a98:	4b53      	ldr	r3, [pc, #332]	; (8001be8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	4a52      	ldr	r2, [pc, #328]	; (8001be8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a9e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001aa2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001aa4:	4b50      	ldr	r3, [pc, #320]	; (8001be8 <HAL_RCC_ClockConfig+0x1c4>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	494d      	ldr	r1, [pc, #308]	; (8001be8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0301 	and.w	r3, r3, #1
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d040      	beq.n	8001b44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d107      	bne.n	8001ada <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aca:	4b47      	ldr	r3, [pc, #284]	; (8001be8 <HAL_RCC_ClockConfig+0x1c4>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d115      	bne.n	8001b02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e07f      	b.n	8001bda <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d107      	bne.n	8001af2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ae2:	4b41      	ldr	r3, [pc, #260]	; (8001be8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d109      	bne.n	8001b02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e073      	b.n	8001bda <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001af2:	4b3d      	ldr	r3, [pc, #244]	; (8001be8 <HAL_RCC_ClockConfig+0x1c4>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d101      	bne.n	8001b02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e06b      	b.n	8001bda <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b02:	4b39      	ldr	r3, [pc, #228]	; (8001be8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f023 0203 	bic.w	r2, r3, #3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	4936      	ldr	r1, [pc, #216]	; (8001be8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b10:	4313      	orrs	r3, r2
 8001b12:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b14:	f7ff f9f0 	bl	8000ef8 <HAL_GetTick>
 8001b18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b1a:	e00a      	b.n	8001b32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b1c:	f7ff f9ec 	bl	8000ef8 <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e053      	b.n	8001bda <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b32:	4b2d      	ldr	r3, [pc, #180]	; (8001be8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f003 020c 	and.w	r2, r3, #12
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d1eb      	bne.n	8001b1c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b44:	4b27      	ldr	r3, [pc, #156]	; (8001be4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0307 	and.w	r3, r3, #7
 8001b4c:	683a      	ldr	r2, [r7, #0]
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	d210      	bcs.n	8001b74 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b52:	4b24      	ldr	r3, [pc, #144]	; (8001be4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f023 0207 	bic.w	r2, r3, #7
 8001b5a:	4922      	ldr	r1, [pc, #136]	; (8001be4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b62:	4b20      	ldr	r3, [pc, #128]	; (8001be4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0307 	and.w	r3, r3, #7
 8001b6a:	683a      	ldr	r2, [r7, #0]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d001      	beq.n	8001b74 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e032      	b.n	8001bda <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 0304 	and.w	r3, r3, #4
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d008      	beq.n	8001b92 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b80:	4b19      	ldr	r3, [pc, #100]	; (8001be8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	4916      	ldr	r1, [pc, #88]	; (8001be8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0308 	and.w	r3, r3, #8
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d009      	beq.n	8001bb2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b9e:	4b12      	ldr	r3, [pc, #72]	; (8001be8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	691b      	ldr	r3, [r3, #16]
 8001baa:	00db      	lsls	r3, r3, #3
 8001bac:	490e      	ldr	r1, [pc, #56]	; (8001be8 <HAL_RCC_ClockConfig+0x1c4>)
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001bb2:	f000 f821 	bl	8001bf8 <HAL_RCC_GetSysClockFreq>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	4b0b      	ldr	r3, [pc, #44]	; (8001be8 <HAL_RCC_ClockConfig+0x1c4>)
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	091b      	lsrs	r3, r3, #4
 8001bbe:	f003 030f 	and.w	r3, r3, #15
 8001bc2:	490a      	ldr	r1, [pc, #40]	; (8001bec <HAL_RCC_ClockConfig+0x1c8>)
 8001bc4:	5ccb      	ldrb	r3, [r1, r3]
 8001bc6:	fa22 f303 	lsr.w	r3, r2, r3
 8001bca:	4a09      	ldr	r2, [pc, #36]	; (8001bf0 <HAL_RCC_ClockConfig+0x1cc>)
 8001bcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001bce:	4b09      	ldr	r3, [pc, #36]	; (8001bf4 <HAL_RCC_ClockConfig+0x1d0>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7ff f94e 	bl	8000e74 <HAL_InitTick>

  return HAL_OK;
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3710      	adds	r7, #16
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	40022000 	.word	0x40022000
 8001be8:	40021000 	.word	0x40021000
 8001bec:	08002528 	.word	0x08002528
 8001bf0:	20000028 	.word	0x20000028
 8001bf4:	2000002c 	.word	0x2000002c

08001bf8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b087      	sub	sp, #28
 8001bfc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	60fb      	str	r3, [r7, #12]
 8001c02:	2300      	movs	r3, #0
 8001c04:	60bb      	str	r3, [r7, #8]
 8001c06:	2300      	movs	r3, #0
 8001c08:	617b      	str	r3, [r7, #20]
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c12:	4b1e      	ldr	r3, [pc, #120]	; (8001c8c <HAL_RCC_GetSysClockFreq+0x94>)
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	f003 030c 	and.w	r3, r3, #12
 8001c1e:	2b04      	cmp	r3, #4
 8001c20:	d002      	beq.n	8001c28 <HAL_RCC_GetSysClockFreq+0x30>
 8001c22:	2b08      	cmp	r3, #8
 8001c24:	d003      	beq.n	8001c2e <HAL_RCC_GetSysClockFreq+0x36>
 8001c26:	e027      	b.n	8001c78 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c28:	4b19      	ldr	r3, [pc, #100]	; (8001c90 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c2a:	613b      	str	r3, [r7, #16]
      break;
 8001c2c:	e027      	b.n	8001c7e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	0c9b      	lsrs	r3, r3, #18
 8001c32:	f003 030f 	and.w	r3, r3, #15
 8001c36:	4a17      	ldr	r2, [pc, #92]	; (8001c94 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001c38:	5cd3      	ldrb	r3, [r2, r3]
 8001c3a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d010      	beq.n	8001c68 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c46:	4b11      	ldr	r3, [pc, #68]	; (8001c8c <HAL_RCC_GetSysClockFreq+0x94>)
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	0c5b      	lsrs	r3, r3, #17
 8001c4c:	f003 0301 	and.w	r3, r3, #1
 8001c50:	4a11      	ldr	r2, [pc, #68]	; (8001c98 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001c52:	5cd3      	ldrb	r3, [r2, r3]
 8001c54:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a0d      	ldr	r2, [pc, #52]	; (8001c90 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c5a:	fb03 f202 	mul.w	r2, r3, r2
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c64:	617b      	str	r3, [r7, #20]
 8001c66:	e004      	b.n	8001c72 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	4a0c      	ldr	r2, [pc, #48]	; (8001c9c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001c6c:	fb02 f303 	mul.w	r3, r2, r3
 8001c70:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	613b      	str	r3, [r7, #16]
      break;
 8001c76:	e002      	b.n	8001c7e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c78:	4b05      	ldr	r3, [pc, #20]	; (8001c90 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c7a:	613b      	str	r3, [r7, #16]
      break;
 8001c7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c7e:	693b      	ldr	r3, [r7, #16]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	371c      	adds	r7, #28
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bc80      	pop	{r7}
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	40021000 	.word	0x40021000
 8001c90:	007a1200 	.word	0x007a1200
 8001c94:	08002538 	.word	0x08002538
 8001c98:	08002548 	.word	0x08002548
 8001c9c:	003d0900 	.word	0x003d0900

08001ca0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b085      	sub	sp, #20
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ca8:	4b0a      	ldr	r3, [pc, #40]	; (8001cd4 <RCC_Delay+0x34>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a0a      	ldr	r2, [pc, #40]	; (8001cd8 <RCC_Delay+0x38>)
 8001cae:	fba2 2303 	umull	r2, r3, r2, r3
 8001cb2:	0a5b      	lsrs	r3, r3, #9
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	fb02 f303 	mul.w	r3, r2, r3
 8001cba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001cbc:	bf00      	nop
  }
  while (Delay --);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	1e5a      	subs	r2, r3, #1
 8001cc2:	60fa      	str	r2, [r7, #12]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d1f9      	bne.n	8001cbc <RCC_Delay+0x1c>
}
 8001cc8:	bf00      	nop
 8001cca:	bf00      	nop
 8001ccc:	3714      	adds	r7, #20
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bc80      	pop	{r7}
 8001cd2:	4770      	bx	lr
 8001cd4:	20000028 	.word	0x20000028
 8001cd8:	10624dd3 	.word	0x10624dd3

08001cdc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d101      	bne.n	8001cee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e041      	b.n	8001d72 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d106      	bne.n	8001d08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f7ff f856 	bl	8000db4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2202      	movs	r2, #2
 8001d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	3304      	adds	r3, #4
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4610      	mov	r0, r2
 8001d1c:	f000 fa6e 	bl	80021fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2201      	movs	r2, #1
 8001d24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2201      	movs	r2, #1
 8001d34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2201      	movs	r2, #1
 8001d64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
	...

08001d7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b085      	sub	sp, #20
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d001      	beq.n	8001d94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e035      	b.n	8001e00 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2202      	movs	r2, #2
 8001d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	68da      	ldr	r2, [r3, #12]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f042 0201 	orr.w	r2, r2, #1
 8001daa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a16      	ldr	r2, [pc, #88]	; (8001e0c <HAL_TIM_Base_Start_IT+0x90>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d009      	beq.n	8001dca <HAL_TIM_Base_Start_IT+0x4e>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dbe:	d004      	beq.n	8001dca <HAL_TIM_Base_Start_IT+0x4e>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a12      	ldr	r2, [pc, #72]	; (8001e10 <HAL_TIM_Base_Start_IT+0x94>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d111      	bne.n	8001dee <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	f003 0307 	and.w	r3, r3, #7
 8001dd4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2b06      	cmp	r3, #6
 8001dda:	d010      	beq.n	8001dfe <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f042 0201 	orr.w	r2, r2, #1
 8001dea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dec:	e007      	b.n	8001dfe <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f042 0201 	orr.w	r2, r2, #1
 8001dfc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001dfe:	2300      	movs	r3, #0
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3714      	adds	r7, #20
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bc80      	pop	{r7}
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	40012c00 	.word	0x40012c00
 8001e10:	40000400 	.word	0x40000400

08001e14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	691b      	ldr	r3, [r3, #16]
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d122      	bne.n	8001e70 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	f003 0302 	and.w	r3, r3, #2
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d11b      	bne.n	8001e70 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f06f 0202 	mvn.w	r2, #2
 8001e40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2201      	movs	r2, #1
 8001e46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	699b      	ldr	r3, [r3, #24]
 8001e4e:	f003 0303 	and.w	r3, r3, #3
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d003      	beq.n	8001e5e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f000 f9b4 	bl	80021c4 <HAL_TIM_IC_CaptureCallback>
 8001e5c:	e005      	b.n	8001e6a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f000 f9a7 	bl	80021b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f000 f9b6 	bl	80021d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	691b      	ldr	r3, [r3, #16]
 8001e76:	f003 0304 	and.w	r3, r3, #4
 8001e7a:	2b04      	cmp	r3, #4
 8001e7c:	d122      	bne.n	8001ec4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	f003 0304 	and.w	r3, r3, #4
 8001e88:	2b04      	cmp	r3, #4
 8001e8a:	d11b      	bne.n	8001ec4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f06f 0204 	mvn.w	r2, #4
 8001e94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2202      	movs	r2, #2
 8001e9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	699b      	ldr	r3, [r3, #24]
 8001ea2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d003      	beq.n	8001eb2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f000 f98a 	bl	80021c4 <HAL_TIM_IC_CaptureCallback>
 8001eb0:	e005      	b.n	8001ebe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f000 f97d 	bl	80021b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f000 f98c 	bl	80021d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	691b      	ldr	r3, [r3, #16]
 8001eca:	f003 0308 	and.w	r3, r3, #8
 8001ece:	2b08      	cmp	r3, #8
 8001ed0:	d122      	bne.n	8001f18 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	f003 0308 	and.w	r3, r3, #8
 8001edc:	2b08      	cmp	r3, #8
 8001ede:	d11b      	bne.n	8001f18 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f06f 0208 	mvn.w	r2, #8
 8001ee8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2204      	movs	r2, #4
 8001eee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	69db      	ldr	r3, [r3, #28]
 8001ef6:	f003 0303 	and.w	r3, r3, #3
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d003      	beq.n	8001f06 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f000 f960 	bl	80021c4 <HAL_TIM_IC_CaptureCallback>
 8001f04:	e005      	b.n	8001f12 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f000 f953 	bl	80021b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f000 f962 	bl	80021d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	691b      	ldr	r3, [r3, #16]
 8001f1e:	f003 0310 	and.w	r3, r3, #16
 8001f22:	2b10      	cmp	r3, #16
 8001f24:	d122      	bne.n	8001f6c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	f003 0310 	and.w	r3, r3, #16
 8001f30:	2b10      	cmp	r3, #16
 8001f32:	d11b      	bne.n	8001f6c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f06f 0210 	mvn.w	r2, #16
 8001f3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2208      	movs	r2, #8
 8001f42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	69db      	ldr	r3, [r3, #28]
 8001f4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d003      	beq.n	8001f5a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f000 f936 	bl	80021c4 <HAL_TIM_IC_CaptureCallback>
 8001f58:	e005      	b.n	8001f66 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f000 f929 	bl	80021b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f000 f938 	bl	80021d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	691b      	ldr	r3, [r3, #16]
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d10e      	bne.n	8001f98 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	f003 0301 	and.w	r3, r3, #1
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d107      	bne.n	8001f98 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f06f 0201 	mvn.w	r2, #1
 8001f90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f7fe fe43 	bl	8000c1e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fa2:	2b80      	cmp	r3, #128	; 0x80
 8001fa4:	d10e      	bne.n	8001fc4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fb0:	2b80      	cmp	r3, #128	; 0x80
 8001fb2:	d107      	bne.n	8001fc4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001fbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f000 fa6b 	bl	800249a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	691b      	ldr	r3, [r3, #16]
 8001fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fce:	2b40      	cmp	r3, #64	; 0x40
 8001fd0:	d10e      	bne.n	8001ff0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fdc:	2b40      	cmp	r3, #64	; 0x40
 8001fde:	d107      	bne.n	8001ff0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001fe8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f000 f8fc 	bl	80021e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	691b      	ldr	r3, [r3, #16]
 8001ff6:	f003 0320 	and.w	r3, r3, #32
 8001ffa:	2b20      	cmp	r3, #32
 8001ffc:	d10e      	bne.n	800201c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	f003 0320 	and.w	r3, r3, #32
 8002008:	2b20      	cmp	r3, #32
 800200a:	d107      	bne.n	800201c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f06f 0220 	mvn.w	r2, #32
 8002014:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f000 fa36 	bl	8002488 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800201c:	bf00      	nop
 800201e:	3708      	adds	r7, #8
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}

08002024 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800202e:	2300      	movs	r3, #0
 8002030:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002038:	2b01      	cmp	r3, #1
 800203a:	d101      	bne.n	8002040 <HAL_TIM_ConfigClockSource+0x1c>
 800203c:	2302      	movs	r3, #2
 800203e:	e0b4      	b.n	80021aa <HAL_TIM_ConfigClockSource+0x186>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2201      	movs	r2, #1
 8002044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2202      	movs	r2, #2
 800204c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800205e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002066:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	68ba      	ldr	r2, [r7, #8]
 800206e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002078:	d03e      	beq.n	80020f8 <HAL_TIM_ConfigClockSource+0xd4>
 800207a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800207e:	f200 8087 	bhi.w	8002190 <HAL_TIM_ConfigClockSource+0x16c>
 8002082:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002086:	f000 8086 	beq.w	8002196 <HAL_TIM_ConfigClockSource+0x172>
 800208a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800208e:	d87f      	bhi.n	8002190 <HAL_TIM_ConfigClockSource+0x16c>
 8002090:	2b70      	cmp	r3, #112	; 0x70
 8002092:	d01a      	beq.n	80020ca <HAL_TIM_ConfigClockSource+0xa6>
 8002094:	2b70      	cmp	r3, #112	; 0x70
 8002096:	d87b      	bhi.n	8002190 <HAL_TIM_ConfigClockSource+0x16c>
 8002098:	2b60      	cmp	r3, #96	; 0x60
 800209a:	d050      	beq.n	800213e <HAL_TIM_ConfigClockSource+0x11a>
 800209c:	2b60      	cmp	r3, #96	; 0x60
 800209e:	d877      	bhi.n	8002190 <HAL_TIM_ConfigClockSource+0x16c>
 80020a0:	2b50      	cmp	r3, #80	; 0x50
 80020a2:	d03c      	beq.n	800211e <HAL_TIM_ConfigClockSource+0xfa>
 80020a4:	2b50      	cmp	r3, #80	; 0x50
 80020a6:	d873      	bhi.n	8002190 <HAL_TIM_ConfigClockSource+0x16c>
 80020a8:	2b40      	cmp	r3, #64	; 0x40
 80020aa:	d058      	beq.n	800215e <HAL_TIM_ConfigClockSource+0x13a>
 80020ac:	2b40      	cmp	r3, #64	; 0x40
 80020ae:	d86f      	bhi.n	8002190 <HAL_TIM_ConfigClockSource+0x16c>
 80020b0:	2b30      	cmp	r3, #48	; 0x30
 80020b2:	d064      	beq.n	800217e <HAL_TIM_ConfigClockSource+0x15a>
 80020b4:	2b30      	cmp	r3, #48	; 0x30
 80020b6:	d86b      	bhi.n	8002190 <HAL_TIM_ConfigClockSource+0x16c>
 80020b8:	2b20      	cmp	r3, #32
 80020ba:	d060      	beq.n	800217e <HAL_TIM_ConfigClockSource+0x15a>
 80020bc:	2b20      	cmp	r3, #32
 80020be:	d867      	bhi.n	8002190 <HAL_TIM_ConfigClockSource+0x16c>
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d05c      	beq.n	800217e <HAL_TIM_ConfigClockSource+0x15a>
 80020c4:	2b10      	cmp	r3, #16
 80020c6:	d05a      	beq.n	800217e <HAL_TIM_ConfigClockSource+0x15a>
 80020c8:	e062      	b.n	8002190 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6818      	ldr	r0, [r3, #0]
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	6899      	ldr	r1, [r3, #8]
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685a      	ldr	r2, [r3, #4]
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	f000 f95e 	bl	800239a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80020ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	68ba      	ldr	r2, [r7, #8]
 80020f4:	609a      	str	r2, [r3, #8]
      break;
 80020f6:	e04f      	b.n	8002198 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6818      	ldr	r0, [r3, #0]
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	6899      	ldr	r1, [r3, #8]
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685a      	ldr	r2, [r3, #4]
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	f000 f947 	bl	800239a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	689a      	ldr	r2, [r3, #8]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800211a:	609a      	str	r2, [r3, #8]
      break;
 800211c:	e03c      	b.n	8002198 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6818      	ldr	r0, [r3, #0]
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	6859      	ldr	r1, [r3, #4]
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	461a      	mov	r2, r3
 800212c:	f000 f8be 	bl	80022ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2150      	movs	r1, #80	; 0x50
 8002136:	4618      	mov	r0, r3
 8002138:	f000 f915 	bl	8002366 <TIM_ITRx_SetConfig>
      break;
 800213c:	e02c      	b.n	8002198 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6818      	ldr	r0, [r3, #0]
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	6859      	ldr	r1, [r3, #4]
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	68db      	ldr	r3, [r3, #12]
 800214a:	461a      	mov	r2, r3
 800214c:	f000 f8dc 	bl	8002308 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2160      	movs	r1, #96	; 0x60
 8002156:	4618      	mov	r0, r3
 8002158:	f000 f905 	bl	8002366 <TIM_ITRx_SetConfig>
      break;
 800215c:	e01c      	b.n	8002198 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6818      	ldr	r0, [r3, #0]
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	6859      	ldr	r1, [r3, #4]
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	461a      	mov	r2, r3
 800216c:	f000 f89e 	bl	80022ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2140      	movs	r1, #64	; 0x40
 8002176:	4618      	mov	r0, r3
 8002178:	f000 f8f5 	bl	8002366 <TIM_ITRx_SetConfig>
      break;
 800217c:	e00c      	b.n	8002198 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4619      	mov	r1, r3
 8002188:	4610      	mov	r0, r2
 800218a:	f000 f8ec 	bl	8002366 <TIM_ITRx_SetConfig>
      break;
 800218e:	e003      	b.n	8002198 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	73fb      	strb	r3, [r7, #15]
      break;
 8002194:	e000      	b.n	8002198 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002196:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2201      	movs	r2, #1
 800219c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80021a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3710      	adds	r7, #16
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021b2:	b480      	push	{r7}
 80021b4:	b083      	sub	sp, #12
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80021ba:	bf00      	nop
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	bc80      	pop	{r7}
 80021c2:	4770      	bx	lr

080021c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80021cc:	bf00      	nop
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bc80      	pop	{r7}
 80021d4:	4770      	bx	lr

080021d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80021d6:	b480      	push	{r7}
 80021d8:	b083      	sub	sp, #12
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80021de:	bf00      	nop
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bc80      	pop	{r7}
 80021e6:	4770      	bx	lr

080021e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80021f0:	bf00      	nop
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bc80      	pop	{r7}
 80021f8:	4770      	bx	lr
	...

080021fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b085      	sub	sp, #20
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	4a25      	ldr	r2, [pc, #148]	; (80022a4 <TIM_Base_SetConfig+0xa8>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d007      	beq.n	8002224 <TIM_Base_SetConfig+0x28>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800221a:	d003      	beq.n	8002224 <TIM_Base_SetConfig+0x28>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	4a22      	ldr	r2, [pc, #136]	; (80022a8 <TIM_Base_SetConfig+0xac>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d108      	bne.n	8002236 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800222a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	68fa      	ldr	r2, [r7, #12]
 8002232:	4313      	orrs	r3, r2
 8002234:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a1a      	ldr	r2, [pc, #104]	; (80022a4 <TIM_Base_SetConfig+0xa8>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d007      	beq.n	800224e <TIM_Base_SetConfig+0x52>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002244:	d003      	beq.n	800224e <TIM_Base_SetConfig+0x52>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a17      	ldr	r2, [pc, #92]	; (80022a8 <TIM_Base_SetConfig+0xac>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d108      	bne.n	8002260 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002254:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	68fa      	ldr	r2, [r7, #12]
 800225c:	4313      	orrs	r3, r2
 800225e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	695b      	ldr	r3, [r3, #20]
 800226a:	4313      	orrs	r3, r2
 800226c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	68fa      	ldr	r2, [r7, #12]
 8002272:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	689a      	ldr	r2, [r3, #8]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	4a07      	ldr	r2, [pc, #28]	; (80022a4 <TIM_Base_SetConfig+0xa8>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d103      	bne.n	8002294 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	691a      	ldr	r2, [r3, #16]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	615a      	str	r2, [r3, #20]
}
 800229a:	bf00      	nop
 800229c:	3714      	adds	r7, #20
 800229e:	46bd      	mov	sp, r7
 80022a0:	bc80      	pop	{r7}
 80022a2:	4770      	bx	lr
 80022a4:	40012c00 	.word	0x40012c00
 80022a8:	40000400 	.word	0x40000400

080022ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b087      	sub	sp, #28
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6a1b      	ldr	r3, [r3, #32]
 80022bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	6a1b      	ldr	r3, [r3, #32]
 80022c2:	f023 0201 	bic.w	r2, r3, #1
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	699b      	ldr	r3, [r3, #24]
 80022ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	011b      	lsls	r3, r3, #4
 80022dc:	693a      	ldr	r2, [r7, #16]
 80022de:	4313      	orrs	r3, r2
 80022e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	f023 030a 	bic.w	r3, r3, #10
 80022e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80022ea:	697a      	ldr	r2, [r7, #20]
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	693a      	ldr	r2, [r7, #16]
 80022f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	697a      	ldr	r2, [r7, #20]
 80022fc:	621a      	str	r2, [r3, #32]
}
 80022fe:	bf00      	nop
 8002300:	371c      	adds	r7, #28
 8002302:	46bd      	mov	sp, r7
 8002304:	bc80      	pop	{r7}
 8002306:	4770      	bx	lr

08002308 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002308:	b480      	push	{r7}
 800230a:	b087      	sub	sp, #28
 800230c:	af00      	add	r7, sp, #0
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	6a1b      	ldr	r3, [r3, #32]
 8002318:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	6a1b      	ldr	r3, [r3, #32]
 800231e:	f023 0210 	bic.w	r2, r3, #16
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	699b      	ldr	r3, [r3, #24]
 800232a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002332:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	031b      	lsls	r3, r3, #12
 8002338:	693a      	ldr	r2, [r7, #16]
 800233a:	4313      	orrs	r3, r2
 800233c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002344:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	011b      	lsls	r3, r3, #4
 800234a:	697a      	ldr	r2, [r7, #20]
 800234c:	4313      	orrs	r3, r2
 800234e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	693a      	ldr	r2, [r7, #16]
 8002354:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	697a      	ldr	r2, [r7, #20]
 800235a:	621a      	str	r2, [r3, #32]
}
 800235c:	bf00      	nop
 800235e:	371c      	adds	r7, #28
 8002360:	46bd      	mov	sp, r7
 8002362:	bc80      	pop	{r7}
 8002364:	4770      	bx	lr

08002366 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002366:	b480      	push	{r7}
 8002368:	b085      	sub	sp, #20
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
 800236e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800237c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800237e:	683a      	ldr	r2, [r7, #0]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	4313      	orrs	r3, r2
 8002384:	f043 0307 	orr.w	r3, r3, #7
 8002388:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	68fa      	ldr	r2, [r7, #12]
 800238e:	609a      	str	r2, [r3, #8]
}
 8002390:	bf00      	nop
 8002392:	3714      	adds	r7, #20
 8002394:	46bd      	mov	sp, r7
 8002396:	bc80      	pop	{r7}
 8002398:	4770      	bx	lr

0800239a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800239a:	b480      	push	{r7}
 800239c:	b087      	sub	sp, #28
 800239e:	af00      	add	r7, sp, #0
 80023a0:	60f8      	str	r0, [r7, #12]
 80023a2:	60b9      	str	r1, [r7, #8]
 80023a4:	607a      	str	r2, [r7, #4]
 80023a6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80023b4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	021a      	lsls	r2, r3, #8
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	431a      	orrs	r2, r3
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	697a      	ldr	r2, [r7, #20]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	697a      	ldr	r2, [r7, #20]
 80023cc:	609a      	str	r2, [r3, #8]
}
 80023ce:	bf00      	nop
 80023d0:	371c      	adds	r7, #28
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bc80      	pop	{r7}
 80023d6:	4770      	bx	lr

080023d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80023d8:	b480      	push	{r7}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d101      	bne.n	80023f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80023ec:	2302      	movs	r3, #2
 80023ee:	e041      	b.n	8002474 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2202      	movs	r2, #2
 80023fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002416:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	68fa      	ldr	r2, [r7, #12]
 800241e:	4313      	orrs	r3, r2
 8002420:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	68fa      	ldr	r2, [r7, #12]
 8002428:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a14      	ldr	r2, [pc, #80]	; (8002480 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d009      	beq.n	8002448 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800243c:	d004      	beq.n	8002448 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a10      	ldr	r2, [pc, #64]	; (8002484 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d10c      	bne.n	8002462 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800244e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	68ba      	ldr	r2, [r7, #8]
 8002456:	4313      	orrs	r3, r2
 8002458:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	68ba      	ldr	r2, [r7, #8]
 8002460:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2201      	movs	r2, #1
 8002466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002472:	2300      	movs	r3, #0
}
 8002474:	4618      	mov	r0, r3
 8002476:	3714      	adds	r7, #20
 8002478:	46bd      	mov	sp, r7
 800247a:	bc80      	pop	{r7}
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	40012c00 	.word	0x40012c00
 8002484:	40000400 	.word	0x40000400

08002488 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002490:	bf00      	nop
 8002492:	370c      	adds	r7, #12
 8002494:	46bd      	mov	sp, r7
 8002496:	bc80      	pop	{r7}
 8002498:	4770      	bx	lr

0800249a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800249a:	b480      	push	{r7}
 800249c:	b083      	sub	sp, #12
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80024a2:	bf00      	nop
 80024a4:	370c      	adds	r7, #12
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bc80      	pop	{r7}
 80024aa:	4770      	bx	lr

080024ac <__libc_init_array>:
 80024ac:	b570      	push	{r4, r5, r6, lr}
 80024ae:	2600      	movs	r6, #0
 80024b0:	4d0c      	ldr	r5, [pc, #48]	; (80024e4 <__libc_init_array+0x38>)
 80024b2:	4c0d      	ldr	r4, [pc, #52]	; (80024e8 <__libc_init_array+0x3c>)
 80024b4:	1b64      	subs	r4, r4, r5
 80024b6:	10a4      	asrs	r4, r4, #2
 80024b8:	42a6      	cmp	r6, r4
 80024ba:	d109      	bne.n	80024d0 <__libc_init_array+0x24>
 80024bc:	f000 f822 	bl	8002504 <_init>
 80024c0:	2600      	movs	r6, #0
 80024c2:	4d0a      	ldr	r5, [pc, #40]	; (80024ec <__libc_init_array+0x40>)
 80024c4:	4c0a      	ldr	r4, [pc, #40]	; (80024f0 <__libc_init_array+0x44>)
 80024c6:	1b64      	subs	r4, r4, r5
 80024c8:	10a4      	asrs	r4, r4, #2
 80024ca:	42a6      	cmp	r6, r4
 80024cc:	d105      	bne.n	80024da <__libc_init_array+0x2e>
 80024ce:	bd70      	pop	{r4, r5, r6, pc}
 80024d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80024d4:	4798      	blx	r3
 80024d6:	3601      	adds	r6, #1
 80024d8:	e7ee      	b.n	80024b8 <__libc_init_array+0xc>
 80024da:	f855 3b04 	ldr.w	r3, [r5], #4
 80024de:	4798      	blx	r3
 80024e0:	3601      	adds	r6, #1
 80024e2:	e7f2      	b.n	80024ca <__libc_init_array+0x1e>
 80024e4:	0800254c 	.word	0x0800254c
 80024e8:	0800254c 	.word	0x0800254c
 80024ec:	0800254c 	.word	0x0800254c
 80024f0:	08002550 	.word	0x08002550

080024f4 <memset>:
 80024f4:	4603      	mov	r3, r0
 80024f6:	4402      	add	r2, r0
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d100      	bne.n	80024fe <memset+0xa>
 80024fc:	4770      	bx	lr
 80024fe:	f803 1b01 	strb.w	r1, [r3], #1
 8002502:	e7f9      	b.n	80024f8 <memset+0x4>

08002504 <_init>:
 8002504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002506:	bf00      	nop
 8002508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800250a:	bc08      	pop	{r3}
 800250c:	469e      	mov	lr, r3
 800250e:	4770      	bx	lr

08002510 <_fini>:
 8002510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002512:	bf00      	nop
 8002514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002516:	bc08      	pop	{r3}
 8002518:	469e      	mov	lr, r3
 800251a:	4770      	bx	lr
